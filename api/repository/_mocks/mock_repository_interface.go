// Code generated by MockGen. DO NOT EDIT.
// Source: repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "backend/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddProjectMembers mocks base method.
func (m *MockRepository) AddProjectMembers(projectId int, members []model.User) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProjectMembers", projectId, members)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProjectMembers indicates an expected call of AddProjectMembers.
func (mr *MockRepositoryMockRecorder) AddProjectMembers(projectId, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProjectMembers", reflect.TypeOf((*MockRepository)(nil).AddProjectMembers), projectId, members)
}

// AddUserToGroup mocks base method.
func (m *MockRepository) AddUserToGroup(groupId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", groupId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockRepositoryMockRecorder) AddUserToGroup(groupId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockRepository)(nil).AddUserToGroup), groupId, userId)
}

// AllowPushingToProject mocks base method.
func (m *MockRepository) AllowPushingToProject(projectId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowPushingToProject", projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllowPushingToProject indicates an expected call of AllowPushingToProject.
func (mr *MockRepositoryMockRecorder) AllowPushingToProject(projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowPushingToProject", reflect.TypeOf((*MockRepository)(nil).AllowPushingToProject), projectId)
}

// ChangeGroupName mocks base method.
func (m *MockRepository) ChangeGroupName(id int, name string) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeGroupName", id, name)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeGroupName indicates an expected call of ChangeGroupName.
func (mr *MockRepositoryMockRecorder) ChangeGroupName(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeGroupName", reflect.TypeOf((*MockRepository)(nil).ChangeGroupName), id, name)
}

// CreateGroup mocks base method.
func (m *MockRepository) CreateGroup(name string, visibility model.Visibility, description string, memberEmails []string) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", name, visibility, description, memberEmails)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockRepositoryMockRecorder) CreateGroup(name, visibility, description, memberEmails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockRepository)(nil).CreateGroup), name, visibility, description, memberEmails)
}

// CreateGroupInvite mocks base method.
func (m *MockRepository) CreateGroupInvite(groupId int, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupInvite", groupId, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroupInvite indicates an expected call of CreateGroupInvite.
func (mr *MockRepositoryMockRecorder) CreateGroupInvite(groupId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupInvite", reflect.TypeOf((*MockRepository)(nil).CreateGroupInvite), groupId, email)
}

// CreateProject mocks base method.
func (m *MockRepository) CreateProject(name string, visibility model.Visibility, description string, member []model.User) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", name, visibility, description, member)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockRepositoryMockRecorder) CreateProject(name, visibility, description, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockRepository)(nil).CreateProject), name, visibility, description, member)
}

// CreateProjectInvite mocks base method.
func (m *MockRepository) CreateProjectInvite(projectId int, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectInvite", projectId, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProjectInvite indicates an expected call of CreateProjectInvite.
func (mr *MockRepositoryMockRecorder) CreateProjectInvite(projectId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectInvite", reflect.TypeOf((*MockRepository)(nil).CreateProjectInvite), projectId, email)
}

// DeleteGroup mocks base method.
func (m *MockRepository) DeleteGroup(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockRepositoryMockRecorder) DeleteGroup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockRepository)(nil).DeleteGroup), id)
}

// DeleteProject mocks base method.
func (m *MockRepository) DeleteProject(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockRepositoryMockRecorder) DeleteProject(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockRepository)(nil).DeleteProject), id)
}

// DenyPushingToProject mocks base method.
func (m *MockRepository) DenyPushingToProject(projectId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenyPushingToProject", projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DenyPushingToProject indicates an expected call of DenyPushingToProject.
func (mr *MockRepositoryMockRecorder) DenyPushingToProject(projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyPushingToProject", reflect.TypeOf((*MockRepository)(nil).DenyPushingToProject), projectId)
}

// ForkProject mocks base method.
func (m *MockRepository) ForkProject(projectId int, name string) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForkProject", projectId, name)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForkProject indicates an expected call of ForkProject.
func (mr *MockRepositoryMockRecorder) ForkProject(projectId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkProject", reflect.TypeOf((*MockRepository)(nil).ForkProject), projectId, name)
}

// GetAllGroups mocks base method.
func (m *MockRepository) GetAllGroups() ([]*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups")
	ret0, _ := ret[0].([]*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockRepositoryMockRecorder) GetAllGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockRepository)(nil).GetAllGroups))
}

// GetAllProjects mocks base method.
func (m *MockRepository) GetAllProjects() ([]*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects")
	ret0, _ := ret[0].([]*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects.
func (mr *MockRepositoryMockRecorder) GetAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockRepository)(nil).GetAllProjects))
}

// GetAllProjectsOfGroup mocks base method.
func (m *MockRepository) GetAllProjectsOfGroup(id int) ([]*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjectsOfGroup", id)
	ret0, _ := ret[0].([]*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjectsOfGroup indicates an expected call of GetAllProjectsOfGroup.
func (mr *MockRepositoryMockRecorder) GetAllProjectsOfGroup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjectsOfGroup", reflect.TypeOf((*MockRepository)(nil).GetAllProjectsOfGroup), id)
}

// GetAllUsers mocks base method.
func (m *MockRepository) GetAllUsers() ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockRepositoryMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockRepository)(nil).GetAllUsers))
}

// GetAllUsersOfGroup mocks base method.
func (m *MockRepository) GetAllUsersOfGroup(id int) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersOfGroup", id)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersOfGroup indicates an expected call of GetAllUsersOfGroup.
func (mr *MockRepositoryMockRecorder) GetAllUsersOfGroup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersOfGroup", reflect.TypeOf((*MockRepository)(nil).GetAllUsersOfGroup), id)
}

// GetCurrentUser mocks base method.
func (m *MockRepository) GetCurrentUser() (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser")
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockRepositoryMockRecorder) GetCurrentUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockRepository)(nil).GetCurrentUser))
}

// GetGroupById mocks base method.
func (m *MockRepository) GetGroupById(id int) (*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupById", id)
	ret0, _ := ret[0].(*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupById indicates an expected call of GetGroupById.
func (mr *MockRepositoryMockRecorder) GetGroupById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupById", reflect.TypeOf((*MockRepository)(nil).GetGroupById), id)
}

// GetNamespaceOfProject mocks base method.
func (m *MockRepository) GetNamespaceOfProject(projectId int) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceOfProject", projectId)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceOfProject indicates an expected call of GetNamespaceOfProject.
func (mr *MockRepositoryMockRecorder) GetNamespaceOfProject(projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceOfProject", reflect.TypeOf((*MockRepository)(nil).GetNamespaceOfProject), projectId)
}

// GetPendingGroupInvitations mocks base method.
func (m *MockRepository) GetPendingGroupInvitations(groupId int) ([]*model.PendingInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingGroupInvitations", groupId)
	ret0, _ := ret[0].([]*model.PendingInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingGroupInvitations indicates an expected call of GetPendingGroupInvitations.
func (mr *MockRepositoryMockRecorder) GetPendingGroupInvitations(groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingGroupInvitations", reflect.TypeOf((*MockRepository)(nil).GetPendingGroupInvitations), groupId)
}

// GetPendingProjectInvitations mocks base method.
func (m *MockRepository) GetPendingProjectInvitations(projectId int) ([]*model.PendingInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingProjectInvitations", projectId)
	ret0, _ := ret[0].([]*model.PendingInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingProjectInvitations indicates an expected call of GetPendingProjectInvitations.
func (mr *MockRepositoryMockRecorder) GetPendingProjectInvitations(projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingProjectInvitations", reflect.TypeOf((*MockRepository)(nil).GetPendingProjectInvitations), projectId)
}

// GetProjectById mocks base method.
func (m *MockRepository) GetProjectById(id int) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectById", id)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectById indicates an expected call of GetProjectById.
func (mr *MockRepositoryMockRecorder) GetProjectById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectById", reflect.TypeOf((*MockRepository)(nil).GetProjectById), id)
}

// GetUserById mocks base method.
func (m *MockRepository) GetUserById(id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockRepositoryMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockRepository)(nil).GetUserById), id)
}

// Login mocks base method.
func (m *MockRepository) Login(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockRepositoryMockRecorder) Login(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockRepository)(nil).Login), token)
}

// RemoveUserFromGroup mocks base method.
func (m *MockRepository) RemoveUserFromGroup(groupId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromGroup", groupId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromGroup indicates an expected call of RemoveUserFromGroup.
func (mr *MockRepositoryMockRecorder) RemoveUserFromGroup(groupId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromGroup", reflect.TypeOf((*MockRepository)(nil).RemoveUserFromGroup), groupId, userId)
}

// SearchGroupByExpression mocks base method.
func (m *MockRepository) SearchGroupByExpression(expression string) ([]*model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGroupByExpression", expression)
	ret0, _ := ret[0].([]*model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchGroupByExpression indicates an expected call of SearchGroupByExpression.
func (mr *MockRepositoryMockRecorder) SearchGroupByExpression(expression interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGroupByExpression", reflect.TypeOf((*MockRepository)(nil).SearchGroupByExpression), expression)
}

// SearchProjectByExpression mocks base method.
func (m *MockRepository) SearchProjectByExpression(expression string) ([]*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProjectByExpression", expression)
	ret0, _ := ret[0].([]*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProjectByExpression indicates an expected call of SearchProjectByExpression.
func (mr *MockRepositoryMockRecorder) SearchProjectByExpression(expression interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProjectByExpression", reflect.TypeOf((*MockRepository)(nil).SearchProjectByExpression), expression)
}

// SearchUserByExpression mocks base method.
func (m *MockRepository) SearchUserByExpression(expression string) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserByExpression", expression)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserByExpression indicates an expected call of SearchUserByExpression.
func (mr *MockRepositoryMockRecorder) SearchUserByExpression(expression interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserByExpression", reflect.TypeOf((*MockRepository)(nil).SearchUserByExpression), expression)
}

// SearchUserByExpressionInGroup mocks base method.
func (m *MockRepository) SearchUserByExpressionInGroup(expression string, groupId int) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserByExpressionInGroup", expression, groupId)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserByExpressionInGroup indicates an expected call of SearchUserByExpressionInGroup.
func (mr *MockRepositoryMockRecorder) SearchUserByExpressionInGroup(expression, groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserByExpressionInGroup", reflect.TypeOf((*MockRepository)(nil).SearchUserByExpressionInGroup), expression, groupId)
}

// SearchUserByExpressionInProject mocks base method.
func (m *MockRepository) SearchUserByExpressionInProject(expression string, projectId int) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserByExpressionInProject", expression, projectId)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserByExpressionInProject indicates an expected call of SearchUserByExpressionInProject.
func (mr *MockRepositoryMockRecorder) SearchUserByExpressionInProject(expression, projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserByExpressionInProject", reflect.TypeOf((*MockRepository)(nil).SearchUserByExpressionInProject), expression, projectId)
}
