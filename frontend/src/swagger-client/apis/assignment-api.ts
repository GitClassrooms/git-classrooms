// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * GitLab Classrooms â€“ Backend API
 * This is the API for our Gitlab Classroom Webapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ActiveAssignmentResponse } from '../models';
import { ApiProjectCloneUrlResponse } from '../models';
import { Assignment } from '../models';
import { CreateAssignmentRequest } from '../models';
import { HTTPError } from '../models';
import { UpdateAssignmentRequest } from '../models';
/**
 * AssignmentApi - axios parameter creator
 * @export
 */
export const AssignmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * CreateAssignment
         * @summary CreateAssignment
         * @param {CreateAssignmentRequest} body Assignment Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssignmentV2: async (body: CreateAssignmentRequest, xCsrfToken: string, classroomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAssignmentV2.');
            }
            // verify required parameter 'xCsrfToken' is not null or undefined
            if (xCsrfToken === null || xCsrfToken === undefined) {
                throw new RequiredError('xCsrfToken','Required parameter xCsrfToken was null or undefined when calling createAssignmentV2.');
            }
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling createAssignmentV2.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['X-Csrf-Token'] = String(xCsrfToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GetActiveAssignments
         * @summary GetActiveAssignments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveAssignments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GetClassroomAssignment
         * @summary GetClassroomAssignment
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassroomAssignment: async (classroomId: string, assignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling getClassroomAssignment.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling getClassroomAssignment.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GetClassroomAssignments
         * @summary GetClassroomAssignments
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassroomAssignments: async (classroomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling getClassroomAssignments.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GetMultipleProjectCloneUrls
         * @summary GetMultipleProjectCloneUrls
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentProjectId Assignment Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleProjectCloneUrls: async (classroomId: string, assignmentProjectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling getMultipleProjectCloneUrls.');
            }
            // verify required parameter 'assignmentProjectId' is not null or undefined
            if (assignmentProjectId === null || assignmentProjectId === undefined) {
                throw new RequiredError('assignmentProjectId','Required parameter assignmentProjectId was null or undefined when calling getMultipleProjectCloneUrls.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentProjectId}/repos`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentProjectId"}}`, encodeURIComponent(String(assignmentProjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * UpdateAssignment
         * @summary UpdateAssignment
         * @param {UpdateAssignmentRequest} body Assignment Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAssignment: async (body: UpdateAssignmentRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAssignment.');
            }
            // verify required parameter 'xCsrfToken' is not null or undefined
            if (xCsrfToken === null || xCsrfToken === undefined) {
                throw new RequiredError('xCsrfToken','Required parameter xCsrfToken was null or undefined when calling updateAssignment.');
            }
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling updateAssignment.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling updateAssignment.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['X-Csrf-Token'] = String(xCsrfToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignmentApi - functional programming interface
 * @export
 */
export const AssignmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * CreateAssignment
         * @summary CreateAssignment
         * @param {CreateAssignmentRequest} body Assignment Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssignmentV2(body: CreateAssignmentRequest, xCsrfToken: string, classroomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AssignmentApiAxiosParamCreator(configuration).createAssignmentV2(body, xCsrfToken, classroomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GetActiveAssignments
         * @summary GetActiveAssignments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveAssignments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ActiveAssignmentResponse>>>> {
            const localVarAxiosArgs = await AssignmentApiAxiosParamCreator(configuration).getActiveAssignments(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GetClassroomAssignment
         * @summary GetClassroomAssignment
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassroomAssignment(classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Assignment>>> {
            const localVarAxiosArgs = await AssignmentApiAxiosParamCreator(configuration).getClassroomAssignment(classroomId, assignmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GetClassroomAssignments
         * @summary GetClassroomAssignments
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassroomAssignments(classroomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Assignment>>>> {
            const localVarAxiosArgs = await AssignmentApiAxiosParamCreator(configuration).getClassroomAssignments(classroomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GetMultipleProjectCloneUrls
         * @summary GetMultipleProjectCloneUrls
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentProjectId Assignment Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleProjectCloneUrls(classroomId: string, assignmentProjectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ApiProjectCloneUrlResponse>>>> {
            const localVarAxiosArgs = await AssignmentApiAxiosParamCreator(configuration).getMultipleProjectCloneUrls(classroomId, assignmentProjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * UpdateAssignment
         * @summary UpdateAssignment
         * @param {UpdateAssignmentRequest} body Assignment Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAssignment(body: UpdateAssignmentRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Assignment>>> {
            const localVarAxiosArgs = await AssignmentApiAxiosParamCreator(configuration).updateAssignment(body, xCsrfToken, classroomId, assignmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AssignmentApi - factory interface
 * @export
 */
export const AssignmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * CreateAssignment
         * @summary CreateAssignment
         * @param {CreateAssignmentRequest} body Assignment Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssignmentV2(body: CreateAssignmentRequest, xCsrfToken: string, classroomId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AssignmentApiFp(configuration).createAssignmentV2(body, xCsrfToken, classroomId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetActiveAssignments
         * @summary GetActiveAssignments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveAssignments(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ActiveAssignmentResponse>>> {
            return AssignmentApiFp(configuration).getActiveAssignments(options).then((request) => request(axios, basePath));
        },
        /**
         * GetClassroomAssignment
         * @summary GetClassroomAssignment
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassroomAssignment(classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Assignment>> {
            return AssignmentApiFp(configuration).getClassroomAssignment(classroomId, assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetClassroomAssignments
         * @summary GetClassroomAssignments
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassroomAssignments(classroomId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Assignment>>> {
            return AssignmentApiFp(configuration).getClassroomAssignments(classroomId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetMultipleProjectCloneUrls
         * @summary GetMultipleProjectCloneUrls
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentProjectId Assignment Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleProjectCloneUrls(classroomId: string, assignmentProjectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ApiProjectCloneUrlResponse>>> {
            return AssignmentApiFp(configuration).getMultipleProjectCloneUrls(classroomId, assignmentProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * UpdateAssignment
         * @summary UpdateAssignment
         * @param {UpdateAssignmentRequest} body Assignment Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAssignment(body: UpdateAssignmentRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Assignment>> {
            return AssignmentApiFp(configuration).updateAssignment(body, xCsrfToken, classroomId, assignmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignmentApi - object-oriented interface
 * @export
 * @class AssignmentApi
 * @extends {BaseAPI}
 */
export class AssignmentApi extends BaseAPI {
    /**
     * CreateAssignment
     * @summary CreateAssignment
     * @param {CreateAssignmentRequest} body Assignment Info
     * @param {string} xCsrfToken Csrf-Token
     * @param {string} classroomId Classroom ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentApi
     */
    public async createAssignmentV2(body: CreateAssignmentRequest, xCsrfToken: string, classroomId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AssignmentApiFp(this.configuration).createAssignmentV2(body, xCsrfToken, classroomId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GetActiveAssignments
     * @summary GetActiveAssignments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentApi
     */
    public async getActiveAssignments(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ActiveAssignmentResponse>>> {
        return AssignmentApiFp(this.configuration).getActiveAssignments(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GetClassroomAssignment
     * @summary GetClassroomAssignment
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentApi
     */
    public async getClassroomAssignment(classroomId: string, assignmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Assignment>> {
        return AssignmentApiFp(this.configuration).getClassroomAssignment(classroomId, assignmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GetClassroomAssignments
     * @summary GetClassroomAssignments
     * @param {string} classroomId Classroom ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentApi
     */
    public async getClassroomAssignments(classroomId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Assignment>>> {
        return AssignmentApiFp(this.configuration).getClassroomAssignments(classroomId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GetMultipleProjectCloneUrls
     * @summary GetMultipleProjectCloneUrls
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentProjectId Assignment Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentApi
     */
    public async getMultipleProjectCloneUrls(classroomId: string, assignmentProjectId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ApiProjectCloneUrlResponse>>> {
        return AssignmentApiFp(this.configuration).getMultipleProjectCloneUrls(classroomId, assignmentProjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * UpdateAssignment
     * @summary UpdateAssignment
     * @param {UpdateAssignmentRequest} body Assignment Update Info
     * @param {string} xCsrfToken Csrf-Token
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignmentApi
     */
    public async updateAssignment(body: UpdateAssignmentRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Assignment>> {
        return AssignmentApiFp(this.configuration).updateAssignment(body, xCsrfToken, classroomId, assignmentId, options).then((request) => request(this.axios, this.basePath));
    }
}
