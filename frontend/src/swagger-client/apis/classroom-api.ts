// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Gitlab Classroom API
 * This is the API for our Gitlab Classroom Webapp
 *
 * OpenAPI spec version: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DatabaseUser } from '../models';
import { DefaultControllerCreateClassroomRequest } from '../models';
import { DefaultControllerGetOwnedClassroomResponse } from '../models';
import { HttputilHTTPError } from '../models';
/**
 * ClassroomApi - axios parameter creator
 * @export
 */
export const ClassroomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all gitlab projects of the current team
         * @summary Get all Projects of current team
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classroomsOwnedClassroomIdGitlabGet: async (classroomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling classroomsOwnedClassroomIdGitlabGet.');
            }
            const localVarPath = `/classrooms/owned/{classroomId}/gitlab`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new classroom
         * @summary Get classroom Members
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classroomsOwnedClassroomIdMembersGet: async (classroomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling classroomsOwnedClassroomIdMembersGet.');
            }
            const localVarPath = `/classrooms/owned/{classroomId}/members`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get your owned classrooms
         * @summary Get your owned classrooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classroomsOwnedGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/classrooms/owned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new classroom
         * @summary Create a new classroom
         * @param {DefaultControllerCreateClassroomRequest} body Classroom Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classroomsOwnedPost: async (body: DefaultControllerCreateClassroomRequest, xCsrfToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling classroomsOwnedPost.');
            }
            // verify required parameter 'xCsrfToken' is not null or undefined
            if (xCsrfToken === null || xCsrfToken === undefined) {
                throw new RequiredError('xCsrfToken','Required parameter xCsrfToken was null or undefined when calling classroomsOwnedPost.');
            }
            const localVarPath = `/classrooms/owned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['X-Csrf-Token'] = String(xCsrfToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassroomApi - functional programming interface
 * @export
 */
export const ClassroomApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all gitlab projects of the current team
         * @summary Get all Projects of current team
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classroomsOwnedClassroomIdGitlabGet(classroomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ClassroomApiAxiosParamCreator(configuration).classroomsOwnedClassroomIdGitlabGet(classroomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new classroom
         * @summary Get classroom Members
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classroomsOwnedClassroomIdMembersGet(classroomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DatabaseUser>>>> {
            const localVarAxiosArgs = await ClassroomApiAxiosParamCreator(configuration).classroomsOwnedClassroomIdMembersGet(classroomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get your owned classrooms
         * @summary Get your owned classrooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classroomsOwnedGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DefaultControllerGetOwnedClassroomResponse>>>> {
            const localVarAxiosArgs = await ClassroomApiAxiosParamCreator(configuration).classroomsOwnedGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new classroom
         * @summary Create a new classroom
         * @param {DefaultControllerCreateClassroomRequest} body Classroom Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classroomsOwnedPost(body: DefaultControllerCreateClassroomRequest, xCsrfToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ClassroomApiAxiosParamCreator(configuration).classroomsOwnedPost(body, xCsrfToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ClassroomApi - factory interface
 * @export
 */
export const ClassroomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get all gitlab projects of the current team
         * @summary Get all Projects of current team
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classroomsOwnedClassroomIdGitlabGet(classroomId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ClassroomApiFp(configuration).classroomsOwnedClassroomIdGitlabGet(classroomId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new classroom
         * @summary Get classroom Members
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classroomsOwnedClassroomIdMembersGet(classroomId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DatabaseUser>>> {
            return ClassroomApiFp(configuration).classroomsOwnedClassroomIdMembersGet(classroomId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get your owned classrooms
         * @summary Get your owned classrooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classroomsOwnedGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DefaultControllerGetOwnedClassroomResponse>>> {
            return ClassroomApiFp(configuration).classroomsOwnedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new classroom
         * @summary Create a new classroom
         * @param {DefaultControllerCreateClassroomRequest} body Classroom Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classroomsOwnedPost(body: DefaultControllerCreateClassroomRequest, xCsrfToken: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ClassroomApiFp(configuration).classroomsOwnedPost(body, xCsrfToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClassroomApi - object-oriented interface
 * @export
 * @class ClassroomApi
 * @extends {BaseAPI}
 */
export class ClassroomApi extends BaseAPI {
    /**
     * Get all gitlab projects of the current team
     * @summary Get all Projects of current team
     * @param {string} classroomId Classroom ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApi
     */
    public async classroomsOwnedClassroomIdGitlabGet(classroomId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ClassroomApiFp(this.configuration).classroomsOwnedClassroomIdGitlabGet(classroomId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new classroom
     * @summary Get classroom Members
     * @param {string} classroomId Classroom ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApi
     */
    public async classroomsOwnedClassroomIdMembersGet(classroomId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DatabaseUser>>> {
        return ClassroomApiFp(this.configuration).classroomsOwnedClassroomIdMembersGet(classroomId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get your owned classrooms
     * @summary Get your owned classrooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApi
     */
    public async classroomsOwnedGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DefaultControllerGetOwnedClassroomResponse>>> {
        return ClassroomApiFp(this.configuration).classroomsOwnedGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new classroom
     * @summary Create a new classroom
     * @param {DefaultControllerCreateClassroomRequest} body Classroom Info
     * @param {string} xCsrfToken Csrf-Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassroomApi
     */
    public async classroomsOwnedPost(body: DefaultControllerCreateClassroomRequest, xCsrfToken: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ClassroomApiFp(this.configuration).classroomsOwnedPost(body, xCsrfToken, options).then((request) => request(this.axios, this.basePath));
    }
}
