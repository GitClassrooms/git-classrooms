// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * GitClassrooms â€“ Backend API
 * This is the API for our Gitlab Classroom Webapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AssignmentTestResponse } from '../models';
import { HTTPError } from '../models';
import { ManualGradingResult } from '../models';
import { ManualGradingRubric } from '../models';
import { StartAutoGradingRequest } from '../models';
import { UpdateAssignmentGradingRequest } from '../models';
import { UpdateAssignmentRubricsRequest } from '../models';
import { UpdateAssignmentTestRequest } from '../models';
import { UpdateGradingRequest } from '../models';
/**
 * GradingApi - axios parameter creator
 * @export
 */
export const GradingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * GetGradingResults
         * @summary GetGradingResults
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet: async (classroomId: string, assignmentId: string, projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}/projects/{projectId}/grading`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GetGradingResults
         * @summary GetGradingResults
         * @param {string} classroomId Classroom ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ClassroomsClassroomIdProjectsProjectIdGradingGet: async (classroomId: string, projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling apiV2ClassroomsClassroomIdProjectsProjectIdGradingGet.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling apiV2ClassroomsClassroomIdProjectsProjectIdGradingGet.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/projects/{projectId}/grading`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GetAssignmentGradingRubrics
         * @summary GetAssignmentGradingRubrics
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentGradingRubrics: async (classroomId: string, assignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling getAssignmentGradingRubrics.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling getAssignmentGradingRubrics.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}/grading`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GetClassroomAssignmentTests
         * @summary GetClassroomAssignmentTests
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassroomAssignmentTests: async (classroomId: string, assignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling getClassroomAssignmentTests.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling getClassroomAssignmentTests.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}/tests`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GetGradingRubrics
         * @summary GetGradingRubrics
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGradingRubrics: async (classroomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling getGradingRubrics.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/grading`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * StartAutoGrading
         * @summary StartAutoGrading
         * @param {StartAutoGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAutoGrading: async (body: StartAutoGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling startAutoGrading.');
            }
            // verify required parameter 'xCsrfToken' is not null or undefined
            if (xCsrfToken === null || xCsrfToken === undefined) {
                throw new RequiredError('xCsrfToken','Required parameter xCsrfToken was null or undefined when calling startAutoGrading.');
            }
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling startAutoGrading.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling startAutoGrading.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}/grading/auto`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['X-Csrf-Token'] = String(xCsrfToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * StartAutoGradingForProject
         * @summary StartAutoGradingForProject
         * @param {StartAutoGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAutoGradingForProject: async (body: StartAutoGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling startAutoGradingForProject.');
            }
            // verify required parameter 'xCsrfToken' is not null or undefined
            if (xCsrfToken === null || xCsrfToken === undefined) {
                throw new RequiredError('xCsrfToken','Required parameter xCsrfToken was null or undefined when calling startAutoGradingForProject.');
            }
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling startAutoGradingForProject.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling startAutoGradingForProject.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling startAutoGradingForProject.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}/projects/{projectId}/grading/auto`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['X-Csrf-Token'] = String(xCsrfToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * UpdateAssignmentGradingRubrics
         * @summary UpdateAssignmentGradingRubrics
         * @param {UpdateAssignmentRubricsRequest} body Assignment Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAssignmentGradingRubrics: async (body: UpdateAssignmentRubricsRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAssignmentGradingRubrics.');
            }
            // verify required parameter 'xCsrfToken' is not null or undefined
            if (xCsrfToken === null || xCsrfToken === undefined) {
                throw new RequiredError('xCsrfToken','Required parameter xCsrfToken was null or undefined when calling updateAssignmentGradingRubrics.');
            }
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling updateAssignmentGradingRubrics.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling updateAssignmentGradingRubrics.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}/grading`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['X-Csrf-Token'] = String(xCsrfToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * UpdateAssignmentTests
         * @summary UpdateAssignmentTests
         * @param {UpdateAssignmentTestRequest} body Assignment Test Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAssignmentTests: async (body: UpdateAssignmentTestRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAssignmentTests.');
            }
            // verify required parameter 'xCsrfToken' is not null or undefined
            if (xCsrfToken === null || xCsrfToken === undefined) {
                throw new RequiredError('xCsrfToken','Required parameter xCsrfToken was null or undefined when calling updateAssignmentTests.');
            }
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling updateAssignmentTests.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling updateAssignmentTests.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}/tests`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['X-Csrf-Token'] = String(xCsrfToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * UpdateGradingResults
         * @summary UpdateGradingResults
         * @param {UpdateAssignmentGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGradingResults: async (body: UpdateAssignmentGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateGradingResults.');
            }
            // verify required parameter 'xCsrfToken' is not null or undefined
            if (xCsrfToken === null || xCsrfToken === undefined) {
                throw new RequiredError('xCsrfToken','Required parameter xCsrfToken was null or undefined when calling updateGradingResults.');
            }
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling updateGradingResults.');
            }
            // verify required parameter 'assignmentId' is not null or undefined
            if (assignmentId === null || assignmentId === undefined) {
                throw new RequiredError('assignmentId','Required parameter assignmentId was null or undefined when calling updateGradingResults.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateGradingResults.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/assignments/{assignmentId}/projects/{projectId}/grading`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['X-Csrf-Token'] = String(xCsrfToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * UpdateGradingRubrics
         * @summary UpdateGradingRubrics
         * @param {UpdateGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGradingRubrics: async (body: UpdateGradingRequest, xCsrfToken: string, classroomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateGradingRubrics.');
            }
            // verify required parameter 'xCsrfToken' is not null or undefined
            if (xCsrfToken === null || xCsrfToken === undefined) {
                throw new RequiredError('xCsrfToken','Required parameter xCsrfToken was null or undefined when calling updateGradingRubrics.');
            }
            // verify required parameter 'classroomId' is not null or undefined
            if (classroomId === null || classroomId === undefined) {
                throw new RequiredError('classroomId','Required parameter classroomId was null or undefined when calling updateGradingRubrics.');
            }
            const localVarPath = `/api/v2/classrooms/{classroomId}/grading`
                .replace(`{${"classroomId"}}`, encodeURIComponent(String(classroomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['X-Csrf-Token'] = String(xCsrfToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GradingApi - functional programming interface
 * @export
 */
export const GradingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * GetGradingResults
         * @summary GetGradingResults
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet(classroomId: string, assignmentId: string, projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ManualGradingResult>>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet(classroomId, assignmentId, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GetGradingResults
         * @summary GetGradingResults
         * @param {string} classroomId Classroom ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ClassroomsClassroomIdProjectsProjectIdGradingGet(classroomId: string, projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ManualGradingResult>>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).apiV2ClassroomsClassroomIdProjectsProjectIdGradingGet(classroomId, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GetAssignmentGradingRubrics
         * @summary GetAssignmentGradingRubrics
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentGradingRubrics(classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ManualGradingRubric>>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).getAssignmentGradingRubrics(classroomId, assignmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GetClassroomAssignmentTests
         * @summary GetClassroomAssignmentTests
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassroomAssignmentTests(classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AssignmentTestResponse>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).getClassroomAssignmentTests(classroomId, assignmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GetGradingRubrics
         * @summary GetGradingRubrics
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGradingRubrics(classroomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ManualGradingRubric>>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).getGradingRubrics(classroomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * StartAutoGrading
         * @summary StartAutoGrading
         * @param {StartAutoGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAutoGrading(body: StartAutoGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).startAutoGrading(body, xCsrfToken, classroomId, assignmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * StartAutoGradingForProject
         * @summary StartAutoGradingForProject
         * @param {StartAutoGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAutoGradingForProject(body: StartAutoGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).startAutoGradingForProject(body, xCsrfToken, classroomId, assignmentId, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * UpdateAssignmentGradingRubrics
         * @summary UpdateAssignmentGradingRubrics
         * @param {UpdateAssignmentRubricsRequest} body Assignment Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAssignmentGradingRubrics(body: UpdateAssignmentRubricsRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).updateAssignmentGradingRubrics(body, xCsrfToken, classroomId, assignmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * UpdateAssignmentTests
         * @summary UpdateAssignmentTests
         * @param {UpdateAssignmentTestRequest} body Assignment Test Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAssignmentTests(body: UpdateAssignmentTestRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).updateAssignmentTests(body, xCsrfToken, classroomId, assignmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * UpdateGradingResults
         * @summary UpdateGradingResults
         * @param {UpdateAssignmentGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGradingResults(body: UpdateAssignmentGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).updateGradingResults(body, xCsrfToken, classroomId, assignmentId, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * UpdateGradingRubrics
         * @summary UpdateGradingRubrics
         * @param {UpdateGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGradingRubrics(body: UpdateGradingRequest, xCsrfToken: string, classroomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await GradingApiAxiosParamCreator(configuration).updateGradingRubrics(body, xCsrfToken, classroomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GradingApi - factory interface
 * @export
 */
export const GradingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * GetGradingResults
         * @summary GetGradingResults
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet(classroomId: string, assignmentId: string, projectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ManualGradingResult>>> {
            return GradingApiFp(configuration).apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet(classroomId, assignmentId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetGradingResults
         * @summary GetGradingResults
         * @param {string} classroomId Classroom ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ClassroomsClassroomIdProjectsProjectIdGradingGet(classroomId: string, projectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ManualGradingResult>>> {
            return GradingApiFp(configuration).apiV2ClassroomsClassroomIdProjectsProjectIdGradingGet(classroomId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetAssignmentGradingRubrics
         * @summary GetAssignmentGradingRubrics
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentGradingRubrics(classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ManualGradingRubric>>> {
            return GradingApiFp(configuration).getAssignmentGradingRubrics(classroomId, assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetClassroomAssignmentTests
         * @summary GetClassroomAssignmentTests
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassroomAssignmentTests(classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AssignmentTestResponse>> {
            return GradingApiFp(configuration).getClassroomAssignmentTests(classroomId, assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * GetGradingRubrics
         * @summary GetGradingRubrics
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGradingRubrics(classroomId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ManualGradingRubric>>> {
            return GradingApiFp(configuration).getGradingRubrics(classroomId, options).then((request) => request(axios, basePath));
        },
        /**
         * StartAutoGrading
         * @summary StartAutoGrading
         * @param {StartAutoGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAutoGrading(body: StartAutoGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GradingApiFp(configuration).startAutoGrading(body, xCsrfToken, classroomId, assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * StartAutoGradingForProject
         * @summary StartAutoGradingForProject
         * @param {StartAutoGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAutoGradingForProject(body: StartAutoGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, projectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GradingApiFp(configuration).startAutoGradingForProject(body, xCsrfToken, classroomId, assignmentId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * UpdateAssignmentGradingRubrics
         * @summary UpdateAssignmentGradingRubrics
         * @param {UpdateAssignmentRubricsRequest} body Assignment Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAssignmentGradingRubrics(body: UpdateAssignmentRubricsRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GradingApiFp(configuration).updateAssignmentGradingRubrics(body, xCsrfToken, classroomId, assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * UpdateAssignmentTests
         * @summary UpdateAssignmentTests
         * @param {UpdateAssignmentTestRequest} body Assignment Test Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAssignmentTests(body: UpdateAssignmentTestRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GradingApiFp(configuration).updateAssignmentTests(body, xCsrfToken, classroomId, assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * UpdateGradingResults
         * @summary UpdateGradingResults
         * @param {UpdateAssignmentGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {string} assignmentId Assignment ID
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGradingResults(body: UpdateAssignmentGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, projectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GradingApiFp(configuration).updateGradingResults(body, xCsrfToken, classroomId, assignmentId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * UpdateGradingRubrics
         * @summary UpdateGradingRubrics
         * @param {UpdateGradingRequest} body Grading Update Info
         * @param {string} xCsrfToken Csrf-Token
         * @param {string} classroomId Classroom ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGradingRubrics(body: UpdateGradingRequest, xCsrfToken: string, classroomId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return GradingApiFp(configuration).updateGradingRubrics(body, xCsrfToken, classroomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GradingApi - object-oriented interface
 * @export
 * @class GradingApi
 * @extends {BaseAPI}
 */
export class GradingApi extends BaseAPI {
    /**
     * GetGradingResults
     * @summary GetGradingResults
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet(classroomId: string, assignmentId: string, projectId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ManualGradingResult>>> {
        return GradingApiFp(this.configuration).apiV2ClassroomsClassroomIdAssignmentsAssignmentIdProjectsProjectIdGradingGet(classroomId, assignmentId, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GetGradingResults
     * @summary GetGradingResults
     * @param {string} classroomId Classroom ID
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async apiV2ClassroomsClassroomIdProjectsProjectIdGradingGet(classroomId: string, projectId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ManualGradingResult>>> {
        return GradingApiFp(this.configuration).apiV2ClassroomsClassroomIdProjectsProjectIdGradingGet(classroomId, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GetAssignmentGradingRubrics
     * @summary GetAssignmentGradingRubrics
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async getAssignmentGradingRubrics(classroomId: string, assignmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ManualGradingRubric>>> {
        return GradingApiFp(this.configuration).getAssignmentGradingRubrics(classroomId, assignmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GetClassroomAssignmentTests
     * @summary GetClassroomAssignmentTests
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async getClassroomAssignmentTests(classroomId: string, assignmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AssignmentTestResponse>> {
        return GradingApiFp(this.configuration).getClassroomAssignmentTests(classroomId, assignmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GetGradingRubrics
     * @summary GetGradingRubrics
     * @param {string} classroomId Classroom ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async getGradingRubrics(classroomId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ManualGradingRubric>>> {
        return GradingApiFp(this.configuration).getGradingRubrics(classroomId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * StartAutoGrading
     * @summary StartAutoGrading
     * @param {StartAutoGradingRequest} body Grading Update Info
     * @param {string} xCsrfToken Csrf-Token
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async startAutoGrading(body: StartAutoGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GradingApiFp(this.configuration).startAutoGrading(body, xCsrfToken, classroomId, assignmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * StartAutoGradingForProject
     * @summary StartAutoGradingForProject
     * @param {StartAutoGradingRequest} body Grading Update Info
     * @param {string} xCsrfToken Csrf-Token
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async startAutoGradingForProject(body: StartAutoGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, projectId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GradingApiFp(this.configuration).startAutoGradingForProject(body, xCsrfToken, classroomId, assignmentId, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * UpdateAssignmentGradingRubrics
     * @summary UpdateAssignmentGradingRubrics
     * @param {UpdateAssignmentRubricsRequest} body Assignment Grading Update Info
     * @param {string} xCsrfToken Csrf-Token
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async updateAssignmentGradingRubrics(body: UpdateAssignmentRubricsRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GradingApiFp(this.configuration).updateAssignmentGradingRubrics(body, xCsrfToken, classroomId, assignmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * UpdateAssignmentTests
     * @summary UpdateAssignmentTests
     * @param {UpdateAssignmentTestRequest} body Assignment Test Update Info
     * @param {string} xCsrfToken Csrf-Token
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async updateAssignmentTests(body: UpdateAssignmentTestRequest, xCsrfToken: string, classroomId: string, assignmentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GradingApiFp(this.configuration).updateAssignmentTests(body, xCsrfToken, classroomId, assignmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * UpdateGradingResults
     * @summary UpdateGradingResults
     * @param {UpdateAssignmentGradingRequest} body Grading Update Info
     * @param {string} xCsrfToken Csrf-Token
     * @param {string} classroomId Classroom ID
     * @param {string} assignmentId Assignment ID
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async updateGradingResults(body: UpdateAssignmentGradingRequest, xCsrfToken: string, classroomId: string, assignmentId: string, projectId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GradingApiFp(this.configuration).updateGradingResults(body, xCsrfToken, classroomId, assignmentId, projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * UpdateGradingRubrics
     * @summary UpdateGradingRubrics
     * @param {UpdateGradingRequest} body Grading Update Info
     * @param {string} xCsrfToken Csrf-Token
     * @param {string} classroomId Classroom ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradingApi
     */
    public async updateGradingRubrics(body: UpdateGradingRequest, xCsrfToken: string, classroomId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return GradingApiFp(this.configuration).updateGradingRubrics(body, xCsrfToken, classroomId, options).then((request) => request(this.axios, this.basePath));
    }
}
