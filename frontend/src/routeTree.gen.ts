// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as LoginImport } from "./routes/login"
import { Route as AuthImport } from "./routes/_auth"
import { Route as IndexImport } from "./routes/index"
import { Route as AuthClassroomsRouteImport } from "./routes/_auth/classrooms/route"
import { Route as AuthClassroomsCreateImport } from "./routes/_auth/classrooms_.create"
import { Route as AuthClassroomsClassroomIdIndexImport } from "./routes/_auth/classrooms/$classroomId/index"
import { Route as AuthClassroomsCreateModalImport } from "./routes/_auth/classrooms/create.modal"
import { Route as AuthClassroomsClassroomIdInviteImport } from "./routes/_auth/classrooms/$classroomId/invite"
import { Route as AuthClassroomsClassroomIdInvitationsInvitationIdImport } from "./routes/_auth/classrooms/$classroomId/invitations/$invitationId"
import { Route as AuthClassroomsClassroomIdAssignmentsCreateImport } from "./routes/_auth/classrooms/$classroomId/assignments/create"
import { Route as AuthClassroomsClassroomIdAssignmentsAssignmentIdIndexImport } from "./routes/_auth/classrooms/$classroomId/assignments/$assignmentId/index"
import { Route as AuthClassroomsClassroomIdAssignmentsAssignmentIdAcceptImport } from "./routes/_auth/classrooms/$classroomId/assignments/$assignmentId/accept"

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: "/login",
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const AuthClassroomsRouteRoute = AuthClassroomsRouteImport.update({
  path: "/classrooms",
  getParentRoute: () => AuthRoute,
} as any)

const AuthClassroomsCreateRoute = AuthClassroomsCreateImport.update({
  path: "/classrooms/create",
  getParentRoute: () => AuthRoute,
} as any)

const AuthClassroomsClassroomIdIndexRoute =
  AuthClassroomsClassroomIdIndexImport.update({
    path: "/$classroomId/",
    getParentRoute: () => AuthClassroomsRouteRoute,
  } as any)

const AuthClassroomsCreateModalRoute = AuthClassroomsCreateModalImport.update({
  path: "/create/modal",
  getParentRoute: () => AuthClassroomsRouteRoute,
} as any)

const AuthClassroomsClassroomIdInviteRoute =
  AuthClassroomsClassroomIdInviteImport.update({
    path: "/$classroomId/invite",
    getParentRoute: () => AuthClassroomsRouteRoute,
  } as any)

const AuthClassroomsClassroomIdInvitationsInvitationIdRoute =
  AuthClassroomsClassroomIdInvitationsInvitationIdImport.update({
    path: "/$classroomId/invitations/$invitationId",
    getParentRoute: () => AuthClassroomsRouteRoute,
  } as any)

const AuthClassroomsClassroomIdAssignmentsCreateRoute =
  AuthClassroomsClassroomIdAssignmentsCreateImport.update({
    path: "/$classroomId/assignments/create",
    getParentRoute: () => AuthClassroomsRouteRoute,
  } as any)

const AuthClassroomsClassroomIdAssignmentsAssignmentIdIndexRoute =
  AuthClassroomsClassroomIdAssignmentsAssignmentIdIndexImport.update({
    path: "/$classroomId/assignments/$assignmentId/",
    getParentRoute: () => AuthClassroomsRouteRoute,
  } as any)

const AuthClassroomsClassroomIdAssignmentsAssignmentIdAcceptRoute =
  AuthClassroomsClassroomIdAssignmentsAssignmentIdAcceptImport.update({
    path: "/$classroomId/assignments/$assignmentId/accept",
    getParentRoute: () => AuthClassroomsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/_auth": {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    "/login": {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    "/_auth/classrooms": {
      preLoaderRoute: typeof AuthClassroomsRouteImport
      parentRoute: typeof AuthImport
    }
    "/_auth/classrooms/create": {
      preLoaderRoute: typeof AuthClassroomsCreateImport
      parentRoute: typeof AuthImport
    }
    "/_auth/classrooms/$classroomId/invite": {
      preLoaderRoute: typeof AuthClassroomsClassroomIdInviteImport
      parentRoute: typeof AuthClassroomsRouteImport
    }
    "/_auth/classrooms/create/modal": {
      preLoaderRoute: typeof AuthClassroomsCreateModalImport
      parentRoute: typeof AuthClassroomsRouteImport
    }
    "/_auth/classrooms/$classroomId/": {
      preLoaderRoute: typeof AuthClassroomsClassroomIdIndexImport
      parentRoute: typeof AuthClassroomsRouteImport
    }
    "/_auth/classrooms/$classroomId/assignments/create": {
      preLoaderRoute: typeof AuthClassroomsClassroomIdAssignmentsCreateImport
      parentRoute: typeof AuthClassroomsRouteImport
    }
    "/_auth/classrooms/$classroomId/invitations/$invitationId": {
      preLoaderRoute: typeof AuthClassroomsClassroomIdInvitationsInvitationIdImport
      parentRoute: typeof AuthClassroomsRouteImport
    }
    "/_auth/classrooms/$classroomId/assignments/$assignmentId/accept": {
      preLoaderRoute: typeof AuthClassroomsClassroomIdAssignmentsAssignmentIdAcceptImport
      parentRoute: typeof AuthClassroomsRouteImport
    }
    "/_auth/classrooms/$classroomId/assignments/$assignmentId/": {
      preLoaderRoute: typeof AuthClassroomsClassroomIdAssignmentsAssignmentIdIndexImport
      parentRoute: typeof AuthClassroomsRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AuthRoute.addChildren([
    AuthClassroomsRouteRoute.addChildren([
      AuthClassroomsClassroomIdInviteRoute,
      AuthClassroomsCreateModalRoute,
      AuthClassroomsClassroomIdIndexRoute,
      AuthClassroomsClassroomIdAssignmentsCreateRoute,
      AuthClassroomsClassroomIdInvitationsInvitationIdRoute,
      AuthClassroomsClassroomIdAssignmentsAssignmentIdAcceptRoute,
      AuthClassroomsClassroomIdAssignmentsAssignmentIdIndexRoute,
    ]),
    AuthClassroomsCreateRoute,
  ]),
  LoginRoute,
])
