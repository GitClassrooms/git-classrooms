package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http/httptest"
	"testing"
	"time"

	postgresDriver "gorm.io/driver/postgres"

	gitlabRepoMock "gitlab.hs-flensburg.de/gitlab-classroom/repository/gitlab/_mock"
	"gitlab.hs-flensburg.de/gitlab-classroom/repository/gitlab/model"
	"gorm.io/gorm"

	"gitlab.hs-flensburg.de/gitlab-classroom/model/database"
	"gitlab.hs-flensburg.de/gitlab-classroom/model/database/query"
	"gitlab.hs-flensburg.de/gitlab-classroom/utils"
	"gitlab.hs-flensburg.de/gitlab-classroom/utils/factory"

	"github.com/brianvoe/gofakeit/v7"
	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"
)

func TestGradingGet(t *testing.T) {
	restoreDatabase(t)

	owner := factory.User()
	user := factory.User()
	classroom := factory.Classroom(owner.ID)
	factory.UserClassroom(owner.ID, classroom.ID, database.Owner)
	dueDate := time.Now().Add(1 * time.Hour)
	assignment := factory.Assignment(classroom.ID, &dueDate, true)

	members := []*database.UserClassrooms{
		factory.UserClassroom(user.ID, classroom.ID, database.Student),
	}

	team := factory.Team(classroom.ID, members)
	project := factory.AssignmentProject(assignment.ID, team.ID)

	gitlabRepo := gitlabRepoMock.NewMockRepository(t)
	app := setupApp(t, owner, gitlabRepo)

	targetRoute := fmt.Sprintf("/api/v1/classrooms/%s/assignments/%s/grading", classroom.ID, assignment.ID)

	t.Run("TestGradingGet", func(t *testing.T) {
		req := httptest.NewRequest("GET", targetRoute, nil)
		resp, err := app.Test(req)

		// Handle response
		var gradingResponse *assignmentGradingResponse

		err = json.NewDecoder(resp.Body).Decode(&gradingResponse)
		assert.NoError(t, err)
	})
}
