package api

import (
	"context"
	"fmt"
	"testing"
	"time"

	postgresDriver "gorm.io/driver/postgres"

	"gitlab.hs-flensburg.de/gitlab-classroom/repository/gitlab/model"
	"gorm.io/gorm"

	"gitlab.hs-flensburg.de/gitlab-classroom/model/database"
	"gitlab.hs-flensburg.de/gitlab-classroom/model/database/query"
	"gitlab.hs-flensburg.de/gitlab-classroom/utils"
	"gitlab.hs-flensburg.de/gitlab-classroom/utils/factory"

	"github.com/brianvoe/gofakeit/v7"
	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"
)

func TestStartAutoGrading(t *testing.T) {
	restoreDatabase(t)

	owner := factory.User()
	user := factory.User()
	classroom := factory.Classroom(owner.ID)
	factory.UserClassroom(owner.ID, classroom.ID, database.Owner)
	dueDate := time.Now().Add(1 * time.Hour)
	assignment := factory.Assignment(classroom.ID, &dueDate, true)

	members := []*database.UserClassrooms{
		factory.UserClassroom(user.ID, classroom.ID, database.Student),
	}

	team := factory.Team(classroom.ID, members)
	project := factory.AssignmentProject(assignment.ID, team.ID)

	app, gitlabRepo, _ := setupApp(t, owner)

	targetRoute := fmt.Sprintf("/api/v2/classrooms/%s/assignments/%s/grading/auto", classroom.ID, assignment.ID)

	t.Run("TestStartAutoGrading", func(t *testing.T) {
		// open the database connection agian
		db, err := gorm.Open(postgresDriver.Open(integrationTest.dbURL), &gorm.Config{})
		if err != nil {
			t.Fatalf("could not connect to database: %s", err.Error())
		}

		query.SetDefault(db)

		requestBody := startAutoGradingRequest{JUnitAutoGrading: utils.NewPtr(true)}

		expectedReport := model.TestReport{
			TotalTime:    gofakeit.Float64(),
			TotalCount:   gofakeit.Int(),
			SuccessCount: gofakeit.Int(),
			FailedCount:  gofakeit.Int(),
			SkippedCount: gofakeit.Int(),
			ErrorCount:   gofakeit.Int(),
			TestSuites:   make([]model.TestReportTestSuite, 0),
		}

		var nilString *string

		gitlabRepo.
			EXPECT().
			GetProjectLatestPipelineTestReportSummary(project.ProjectID, nilString).
			Return(&expectedReport, nil).
			Times(1)

		req := newPostJsonRequest(targetRoute, requestBody)
		resp, err := app.Test(req)

		assert.NoError(t, err)
		assert.Equal(t, fiber.StatusAccepted, resp.StatusCode)

		projectQuery := query.AssignmentProjects
		updatedProject, err :=
			projectQuery.WithContext(context.Background()).
				Where(projectQuery.ID.Eq(project.ID)).
				First()

		assert.NoError(t, err)

		assert.NotNil(t, updatedProject.GradingJUnitTestResult)

		testResults := updatedProject.GradingJUnitTestResult

		assert.Equal(t, testResults.TotalTime, expectedReport.TotalTime)
		assert.Equal(t, testResults.TotalCount, expectedReport.TotalCount)
		assert.Equal(t, testResults.SuccessCount, expectedReport.SuccessCount)
		assert.Equal(t, testResults.FailedCount, expectedReport.FailedCount)
		assert.Equal(t, testResults.SkippedCount, expectedReport.SkippedCount)
		assert.Equal(t, testResults.ErrorCount, expectedReport.ErrorCount)

	})
}
