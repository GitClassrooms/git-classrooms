// Code generated by mockery v2.40.1. DO NOT EDIT.

package api

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

type MockController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockController) EXPECT() *MockController_Expecter {
	return &MockController_Expecter{mock: &_m.Mock}
}

// CreateAssignment provides a mock function with given fields: _a0
func (_m *MockController) CreateAssignment(_a0 *fiber.Ctx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateAssignment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockController_CreateAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAssignment'
type MockController_CreateAssignment_Call struct {
	*mock.Call
}

// CreateAssignment is a helper method to define mock.On call
//   - _a0 *fiber.Ctx
func (_e *MockController_Expecter) CreateAssignment(_a0 interface{}) *MockController_CreateAssignment_Call {
	return &MockController_CreateAssignment_Call{Call: _e.mock.On("CreateAssignment", _a0)}
}

func (_c *MockController_CreateAssignment_Call) Run(run func(_a0 *fiber.Ctx)) *MockController_CreateAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockController_CreateAssignment_Call) Return(_a0 error) *MockController_CreateAssignment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockController_CreateAssignment_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockController_CreateAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClassroom provides a mock function with given fields: _a0
func (_m *MockController) CreateClassroom(_a0 *fiber.Ctx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateClassroom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockController_CreateClassroom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClassroom'
type MockController_CreateClassroom_Call struct {
	*mock.Call
}

// CreateClassroom is a helper method to define mock.On call
//   - _a0 *fiber.Ctx
func (_e *MockController_Expecter) CreateClassroom(_a0 interface{}) *MockController_CreateClassroom_Call {
	return &MockController_CreateClassroom_Call{Call: _e.mock.On("CreateClassroom", _a0)}
}

func (_c *MockController_CreateClassroom_Call) Run(run func(_a0 *fiber.Ctx)) *MockController_CreateClassroom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockController_CreateClassroom_Call) Return(_a0 error) *MockController_CreateClassroom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockController_CreateClassroom_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockController_CreateClassroom_Call {
	_c.Call.Return(run)
	return _c
}

// GetMe provides a mock function with given fields: _a0
func (_m *MockController) GetMe(_a0 *fiber.Ctx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockController_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type MockController_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
//   - _a0 *fiber.Ctx
func (_e *MockController_Expecter) GetMe(_a0 interface{}) *MockController_GetMe_Call {
	return &MockController_GetMe_Call{Call: _e.mock.On("GetMe", _a0)}
}

func (_c *MockController_GetMe_Call) Run(run func(_a0 *fiber.Ctx)) *MockController_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockController_GetMe_Call) Return(_a0 error) *MockController_GetMe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockController_GetMe_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockController_GetMe_Call {
	_c.Call.Return(run)
	return _c
}

// InviteToAssignment provides a mock function with given fields: _a0
func (_m *MockController) InviteToAssignment(_a0 *fiber.Ctx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InviteToAssignment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockController_InviteToAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InviteToAssignment'
type MockController_InviteToAssignment_Call struct {
	*mock.Call
}

// InviteToAssignment is a helper method to define mock.On call
//   - _a0 *fiber.Ctx
func (_e *MockController_Expecter) InviteToAssignment(_a0 interface{}) *MockController_InviteToAssignment_Call {
	return &MockController_InviteToAssignment_Call{Call: _e.mock.On("InviteToAssignment", _a0)}
}

func (_c *MockController_InviteToAssignment_Call) Run(run func(_a0 *fiber.Ctx)) *MockController_InviteToAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockController_InviteToAssignment_Call) Return(_a0 error) *MockController_InviteToAssignment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockController_InviteToAssignment_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockController_InviteToAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// InviteToClassroom provides a mock function with given fields: _a0
func (_m *MockController) InviteToClassroom(_a0 *fiber.Ctx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InviteToClassroom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockController_InviteToClassroom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InviteToClassroom'
type MockController_InviteToClassroom_Call struct {
	*mock.Call
}

// InviteToClassroom is a helper method to define mock.On call
//   - _a0 *fiber.Ctx
func (_e *MockController_Expecter) InviteToClassroom(_a0 interface{}) *MockController_InviteToClassroom_Call {
	return &MockController_InviteToClassroom_Call{Call: _e.mock.On("InviteToClassroom", _a0)}
}

func (_c *MockController_InviteToClassroom_Call) Run(run func(_a0 *fiber.Ctx)) *MockController_InviteToClassroom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockController_InviteToClassroom_Call) Return(_a0 error) *MockController_InviteToClassroom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockController_InviteToClassroom_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockController_InviteToClassroom_Call {
	_c.Call.Return(run)
	return _c
}

// JoinAssignment provides a mock function with given fields: _a0
func (_m *MockController) JoinAssignment(_a0 *fiber.Ctx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for JoinAssignment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockController_JoinAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JoinAssignment'
type MockController_JoinAssignment_Call struct {
	*mock.Call
}

// JoinAssignment is a helper method to define mock.On call
//   - _a0 *fiber.Ctx
func (_e *MockController_Expecter) JoinAssignment(_a0 interface{}) *MockController_JoinAssignment_Call {
	return &MockController_JoinAssignment_Call{Call: _e.mock.On("JoinAssignment", _a0)}
}

func (_c *MockController_JoinAssignment_Call) Run(run func(_a0 *fiber.Ctx)) *MockController_JoinAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockController_JoinAssignment_Call) Return(_a0 error) *MockController_JoinAssignment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockController_JoinAssignment_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockController_JoinAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// JoinClassroom provides a mock function with given fields: _a0
func (_m *MockController) JoinClassroom(_a0 *fiber.Ctx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for JoinClassroom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockController_JoinClassroom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JoinClassroom'
type MockController_JoinClassroom_Call struct {
	*mock.Call
}

// JoinClassroom is a helper method to define mock.On call
//   - _a0 *fiber.Ctx
func (_e *MockController_Expecter) JoinClassroom(_a0 interface{}) *MockController_JoinClassroom_Call {
	return &MockController_JoinClassroom_Call{Call: _e.mock.On("JoinClassroom", _a0)}
}

func (_c *MockController_JoinClassroom_Call) Run(run func(_a0 *fiber.Ctx)) *MockController_JoinClassroom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockController_JoinClassroom_Call) Return(_a0 error) *MockController_JoinClassroom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockController_JoinClassroom_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockController_JoinClassroom_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
