// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gitlab.hs-flensburg.de/gitlab-classroom/model/database"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserClassrooms(db *gorm.DB, opts ...gen.DOOption) userClassrooms {
	_userClassrooms := userClassrooms{}

	_userClassrooms.userClassroomsDo.UseDB(db, opts...)
	_userClassrooms.userClassroomsDo.UseModel(&database.UserClassrooms{})

	tableName := _userClassrooms.userClassroomsDo.TableName()
	_userClassrooms.ALL = field.NewAsterisk(tableName)
	_userClassrooms.UserID = field.NewInt(tableName, "user_id")
	_userClassrooms.ClassroomID = field.NewField(tableName, "classroom_id")
	_userClassrooms.Role = field.NewUint8(tableName, "role")
	_userClassrooms.User = userClassroomsBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "database.User"),
		Classrooms: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
			Classroom struct {
				field.RelationField
				Owner struct {
					field.RelationField
				}
				Member struct {
					field.RelationField
				}
				Assignments struct {
					field.RelationField
					Classroom struct {
						field.RelationField
					}
					Projects struct {
						field.RelationField
						Assignment struct {
							field.RelationField
						}
						User struct {
							field.RelationField
						}
					}
				}
				Invitations struct {
					field.RelationField
					Classroom struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("User.Classrooms", "database.UserClassrooms"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Classrooms.User", "database.User"),
			},
			Classroom: struct {
				field.RelationField
				Owner struct {
					field.RelationField
				}
				Member struct {
					field.RelationField
				}
				Assignments struct {
					field.RelationField
					Classroom struct {
						field.RelationField
					}
					Projects struct {
						field.RelationField
						Assignment struct {
							field.RelationField
						}
						User struct {
							field.RelationField
						}
					}
				}
				Invitations struct {
					field.RelationField
					Classroom struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("User.Classrooms.Classroom", "database.Classroom"),
				Owner: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.Classrooms.Classroom.Owner", "database.User"),
				},
				Member: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.Classrooms.Classroom.Member", "database.UserClassrooms"),
				},
				Assignments: struct {
					field.RelationField
					Classroom struct {
						field.RelationField
					}
					Projects struct {
						field.RelationField
						Assignment struct {
							field.RelationField
						}
						User struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("User.Classrooms.Classroom.Assignments", "database.Assignment"),
					Classroom: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("User.Classrooms.Classroom.Assignments.Classroom", "database.Classroom"),
					},
					Projects: struct {
						field.RelationField
						Assignment struct {
							field.RelationField
						}
						User struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("User.Classrooms.Classroom.Assignments.Projects", "database.AssignmentProjects"),
						Assignment: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("User.Classrooms.Classroom.Assignments.Projects.Assignment", "database.Assignment"),
						},
						User: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("User.Classrooms.Classroom.Assignments.Projects.User", "database.User"),
						},
					},
				},
				Invitations: struct {
					field.RelationField
					Classroom struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("User.Classrooms.Classroom.Invitations", "database.ClassroomInvitation"),
					Classroom: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("User.Classrooms.Classroom.Invitations.Classroom", "database.Classroom"),
					},
				},
			},
		},
		AssignmentRepositories: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.AssignmentRepositories", "database.AssignmentProjects"),
		},
	}

	_userClassrooms.Classroom = userClassroomsBelongsToClassroom{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Classroom", "database.Classroom"),
	}

	_userClassrooms.fillFieldMap()

	return _userClassrooms
}

type userClassrooms struct {
	userClassroomsDo

	ALL         field.Asterisk
	UserID      field.Int
	ClassroomID field.Field
	Role        field.Uint8
	User        userClassroomsBelongsToUser

	Classroom userClassroomsBelongsToClassroom

	fieldMap map[string]field.Expr
}

func (u userClassrooms) Table(newTableName string) *userClassrooms {
	u.userClassroomsDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userClassrooms) As(alias string) *userClassrooms {
	u.userClassroomsDo.DO = *(u.userClassroomsDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userClassrooms) updateTableName(table string) *userClassrooms {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt(table, "user_id")
	u.ClassroomID = field.NewField(table, "classroom_id")
	u.Role = field.NewUint8(table, "role")

	u.fillFieldMap()

	return u
}

func (u *userClassrooms) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userClassrooms) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["classroom_id"] = u.ClassroomID
	u.fieldMap["role"] = u.Role

}

func (u userClassrooms) clone(db *gorm.DB) userClassrooms {
	u.userClassroomsDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userClassrooms) replaceDB(db *gorm.DB) userClassrooms {
	u.userClassroomsDo.ReplaceDB(db)
	return u
}

type userClassroomsBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	Classrooms struct {
		field.RelationField
		User struct {
			field.RelationField
		}
		Classroom struct {
			field.RelationField
			Owner struct {
				field.RelationField
			}
			Member struct {
				field.RelationField
			}
			Assignments struct {
				field.RelationField
				Classroom struct {
					field.RelationField
				}
				Projects struct {
					field.RelationField
					Assignment struct {
						field.RelationField
					}
					User struct {
						field.RelationField
					}
				}
			}
			Invitations struct {
				field.RelationField
				Classroom struct {
					field.RelationField
				}
			}
		}
	}
	AssignmentRepositories struct {
		field.RelationField
	}
}

func (a userClassroomsBelongsToUser) Where(conds ...field.Expr) *userClassroomsBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userClassroomsBelongsToUser) WithContext(ctx context.Context) *userClassroomsBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userClassroomsBelongsToUser) Session(session *gorm.Session) *userClassroomsBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a userClassroomsBelongsToUser) Model(m *database.UserClassrooms) *userClassroomsBelongsToUserTx {
	return &userClassroomsBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type userClassroomsBelongsToUserTx struct{ tx *gorm.Association }

func (a userClassroomsBelongsToUserTx) Find() (result *database.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userClassroomsBelongsToUserTx) Append(values ...*database.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userClassroomsBelongsToUserTx) Replace(values ...*database.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userClassroomsBelongsToUserTx) Delete(values ...*database.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userClassroomsBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a userClassroomsBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type userClassroomsBelongsToClassroom struct {
	db *gorm.DB

	field.RelationField
}

func (a userClassroomsBelongsToClassroom) Where(conds ...field.Expr) *userClassroomsBelongsToClassroom {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userClassroomsBelongsToClassroom) WithContext(ctx context.Context) *userClassroomsBelongsToClassroom {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userClassroomsBelongsToClassroom) Session(session *gorm.Session) *userClassroomsBelongsToClassroom {
	a.db = a.db.Session(session)
	return &a
}

func (a userClassroomsBelongsToClassroom) Model(m *database.UserClassrooms) *userClassroomsBelongsToClassroomTx {
	return &userClassroomsBelongsToClassroomTx{a.db.Model(m).Association(a.Name())}
}

type userClassroomsBelongsToClassroomTx struct{ tx *gorm.Association }

func (a userClassroomsBelongsToClassroomTx) Find() (result *database.Classroom, err error) {
	return result, a.tx.Find(&result)
}

func (a userClassroomsBelongsToClassroomTx) Append(values ...*database.Classroom) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userClassroomsBelongsToClassroomTx) Replace(values ...*database.Classroom) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userClassroomsBelongsToClassroomTx) Delete(values ...*database.Classroom) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userClassroomsBelongsToClassroomTx) Clear() error {
	return a.tx.Clear()
}

func (a userClassroomsBelongsToClassroomTx) Count() int64 {
	return a.tx.Count()
}

type userClassroomsDo struct{ gen.DO }

type IUserClassroomsDo interface {
	gen.SubQuery
	Debug() IUserClassroomsDo
	WithContext(ctx context.Context) IUserClassroomsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserClassroomsDo
	WriteDB() IUserClassroomsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserClassroomsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserClassroomsDo
	Not(conds ...gen.Condition) IUserClassroomsDo
	Or(conds ...gen.Condition) IUserClassroomsDo
	Select(conds ...field.Expr) IUserClassroomsDo
	Where(conds ...gen.Condition) IUserClassroomsDo
	Order(conds ...field.Expr) IUserClassroomsDo
	Distinct(cols ...field.Expr) IUserClassroomsDo
	Omit(cols ...field.Expr) IUserClassroomsDo
	Join(table schema.Tabler, on ...field.Expr) IUserClassroomsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserClassroomsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserClassroomsDo
	Group(cols ...field.Expr) IUserClassroomsDo
	Having(conds ...gen.Condition) IUserClassroomsDo
	Limit(limit int) IUserClassroomsDo
	Offset(offset int) IUserClassroomsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserClassroomsDo
	Unscoped() IUserClassroomsDo
	Create(values ...*database.UserClassrooms) error
	CreateInBatches(values []*database.UserClassrooms, batchSize int) error
	Save(values ...*database.UserClassrooms) error
	First() (*database.UserClassrooms, error)
	Take() (*database.UserClassrooms, error)
	Last() (*database.UserClassrooms, error)
	Find() ([]*database.UserClassrooms, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*database.UserClassrooms, err error)
	FindInBatches(result *[]*database.UserClassrooms, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*database.UserClassrooms) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserClassroomsDo
	Assign(attrs ...field.AssignExpr) IUserClassroomsDo
	Joins(fields ...field.RelationField) IUserClassroomsDo
	Preload(fields ...field.RelationField) IUserClassroomsDo
	FirstOrInit() (*database.UserClassrooms, error)
	FirstOrCreate() (*database.UserClassrooms, error)
	FindByPage(offset int, limit int) (result []*database.UserClassrooms, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserClassroomsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userClassroomsDo) Debug() IUserClassroomsDo {
	return u.withDO(u.DO.Debug())
}

func (u userClassroomsDo) WithContext(ctx context.Context) IUserClassroomsDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userClassroomsDo) ReadDB() IUserClassroomsDo {
	return u.Clauses(dbresolver.Read)
}

func (u userClassroomsDo) WriteDB() IUserClassroomsDo {
	return u.Clauses(dbresolver.Write)
}

func (u userClassroomsDo) Session(config *gorm.Session) IUserClassroomsDo {
	return u.withDO(u.DO.Session(config))
}

func (u userClassroomsDo) Clauses(conds ...clause.Expression) IUserClassroomsDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userClassroomsDo) Returning(value interface{}, columns ...string) IUserClassroomsDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userClassroomsDo) Not(conds ...gen.Condition) IUserClassroomsDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userClassroomsDo) Or(conds ...gen.Condition) IUserClassroomsDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userClassroomsDo) Select(conds ...field.Expr) IUserClassroomsDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userClassroomsDo) Where(conds ...gen.Condition) IUserClassroomsDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userClassroomsDo) Order(conds ...field.Expr) IUserClassroomsDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userClassroomsDo) Distinct(cols ...field.Expr) IUserClassroomsDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userClassroomsDo) Omit(cols ...field.Expr) IUserClassroomsDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userClassroomsDo) Join(table schema.Tabler, on ...field.Expr) IUserClassroomsDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userClassroomsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserClassroomsDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userClassroomsDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserClassroomsDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userClassroomsDo) Group(cols ...field.Expr) IUserClassroomsDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userClassroomsDo) Having(conds ...gen.Condition) IUserClassroomsDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userClassroomsDo) Limit(limit int) IUserClassroomsDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userClassroomsDo) Offset(offset int) IUserClassroomsDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userClassroomsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserClassroomsDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userClassroomsDo) Unscoped() IUserClassroomsDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userClassroomsDo) Create(values ...*database.UserClassrooms) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userClassroomsDo) CreateInBatches(values []*database.UserClassrooms, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userClassroomsDo) Save(values ...*database.UserClassrooms) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userClassroomsDo) First() (*database.UserClassrooms, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*database.UserClassrooms), nil
	}
}

func (u userClassroomsDo) Take() (*database.UserClassrooms, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*database.UserClassrooms), nil
	}
}

func (u userClassroomsDo) Last() (*database.UserClassrooms, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*database.UserClassrooms), nil
	}
}

func (u userClassroomsDo) Find() ([]*database.UserClassrooms, error) {
	result, err := u.DO.Find()
	return result.([]*database.UserClassrooms), err
}

func (u userClassroomsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*database.UserClassrooms, err error) {
	buf := make([]*database.UserClassrooms, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userClassroomsDo) FindInBatches(result *[]*database.UserClassrooms, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userClassroomsDo) Attrs(attrs ...field.AssignExpr) IUserClassroomsDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userClassroomsDo) Assign(attrs ...field.AssignExpr) IUserClassroomsDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userClassroomsDo) Joins(fields ...field.RelationField) IUserClassroomsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userClassroomsDo) Preload(fields ...field.RelationField) IUserClassroomsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userClassroomsDo) FirstOrInit() (*database.UserClassrooms, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*database.UserClassrooms), nil
	}
}

func (u userClassroomsDo) FirstOrCreate() (*database.UserClassrooms, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*database.UserClassrooms), nil
	}
}

func (u userClassroomsDo) FindByPage(offset int, limit int) (result []*database.UserClassrooms, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userClassroomsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userClassroomsDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userClassroomsDo) Delete(models ...*database.UserClassrooms) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userClassroomsDo) withDO(do gen.Dao) *userClassroomsDo {
	u.DO = *do.(*gen.DO)
	return u
}
