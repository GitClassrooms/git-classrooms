// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	Assignment           *assignment
	AssignmentInvitation *assignmentInvitation
	AssignmentProjects   *assignmentProjects
	Classroom            *classroom
	ClassroomInvitation  *classroomInvitation
	User                 *user
	UserClassrooms       *userClassrooms
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Assignment = &Q.Assignment
	AssignmentInvitation = &Q.AssignmentInvitation
	AssignmentProjects = &Q.AssignmentProjects
	Classroom = &Q.Classroom
	ClassroomInvitation = &Q.ClassroomInvitation
	User = &Q.User
	UserClassrooms = &Q.UserClassrooms
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		Assignment:           newAssignment(db, opts...),
		AssignmentInvitation: newAssignmentInvitation(db, opts...),
		AssignmentProjects:   newAssignmentProjects(db, opts...),
		Classroom:            newClassroom(db, opts...),
		ClassroomInvitation:  newClassroomInvitation(db, opts...),
		User:                 newUser(db, opts...),
		UserClassrooms:       newUserClassrooms(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Assignment           assignment
	AssignmentInvitation assignmentInvitation
	AssignmentProjects   assignmentProjects
	Classroom            classroom
	ClassroomInvitation  classroomInvitation
	User                 user
	UserClassrooms       userClassrooms
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Assignment:           q.Assignment.clone(db),
		AssignmentInvitation: q.AssignmentInvitation.clone(db),
		AssignmentProjects:   q.AssignmentProjects.clone(db),
		Classroom:            q.Classroom.clone(db),
		ClassroomInvitation:  q.ClassroomInvitation.clone(db),
		User:                 q.User.clone(db),
		UserClassrooms:       q.UserClassrooms.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Assignment:           q.Assignment.replaceDB(db),
		AssignmentInvitation: q.AssignmentInvitation.replaceDB(db),
		AssignmentProjects:   q.AssignmentProjects.replaceDB(db),
		Classroom:            q.Classroom.replaceDB(db),
		ClassroomInvitation:  q.ClassroomInvitation.replaceDB(db),
		User:                 q.User.replaceDB(db),
		UserClassrooms:       q.UserClassrooms.replaceDB(db),
	}
}

type queryCtx struct {
	Assignment           IAssignmentDo
	AssignmentInvitation IAssignmentInvitationDo
	AssignmentProjects   IAssignmentProjectsDo
	Classroom            IClassroomDo
	ClassroomInvitation  IClassroomInvitationDo
	User                 IUserDo
	UserClassrooms       IUserClassroomsDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Assignment:           q.Assignment.WithContext(ctx),
		AssignmentInvitation: q.AssignmentInvitation.WithContext(ctx),
		AssignmentProjects:   q.AssignmentProjects.WithContext(ctx),
		Classroom:            q.Classroom.WithContext(ctx),
		ClassroomInvitation:  q.ClassroomInvitation.WithContext(ctx),
		User:                 q.User.WithContext(ctx),
		UserClassrooms:       q.UserClassrooms.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
