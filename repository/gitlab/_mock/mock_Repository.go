// Code generated by mockery v2.42.2. DO NOT EDIT.

package gitlab

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
	model "gitlab.hs-flensburg.de/gitlab-classroom/repository/gitlab/model"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AddProjectMembers provides a mock function with given fields: projectId, members
func (_m *MockRepository) AddProjectMembers(projectId int, members []model.User) (*model.Project, error) {
	ret := _m.Called(projectId, members)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectMembers")
	}

	var r0 *model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(int, []model.User) (*model.Project, error)); ok {
		return rf(projectId, members)
	}
	if rf, ok := ret.Get(0).(func(int, []model.User) *model.Project); ok {
		r0 = rf(projectId, members)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(int, []model.User) error); ok {
		r1 = rf(projectId, members)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_AddProjectMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectMembers'
type MockRepository_AddProjectMembers_Call struct {
	*mock.Call
}

// AddProjectMembers is a helper method to define mock.On call
//   - projectId int
//   - members []model.User
func (_e *MockRepository_Expecter) AddProjectMembers(projectId interface{}, members interface{}) *MockRepository_AddProjectMembers_Call {
	return &MockRepository_AddProjectMembers_Call{Call: _e.mock.On("AddProjectMembers", projectId, members)}
}

func (_c *MockRepository_AddProjectMembers_Call) Run(run func(projectId int, members []model.User)) *MockRepository_AddProjectMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]model.User))
	})
	return _c
}

func (_c *MockRepository_AddProjectMembers_Call) Return(_a0 *model.Project, _a1 error) *MockRepository_AddProjectMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_AddProjectMembers_Call) RunAndReturn(run func(int, []model.User) (*model.Project, error)) *MockRepository_AddProjectMembers_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToGroup provides a mock function with given fields: groupId, userId, accessLevel
func (_m *MockRepository) AddUserToGroup(groupId int, userId int, accessLevel model.AccessLevelValue) error {
	ret := _m.Called(groupId, userId, accessLevel)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, model.AccessLevelValue) error); ok {
		r0 = rf(groupId, userId, accessLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_AddUserToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToGroup'
type MockRepository_AddUserToGroup_Call struct {
	*mock.Call
}

// AddUserToGroup is a helper method to define mock.On call
//   - groupId int
//   - userId int
//   - accessLevel model.AccessLevelValue
func (_e *MockRepository_Expecter) AddUserToGroup(groupId interface{}, userId interface{}, accessLevel interface{}) *MockRepository_AddUserToGroup_Call {
	return &MockRepository_AddUserToGroup_Call{Call: _e.mock.On("AddUserToGroup", groupId, userId, accessLevel)}
}

func (_c *MockRepository_AddUserToGroup_Call) Run(run func(groupId int, userId int, accessLevel model.AccessLevelValue)) *MockRepository_AddUserToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(model.AccessLevelValue))
	})
	return _c
}

func (_c *MockRepository_AddUserToGroup_Call) Return(_a0 error) *MockRepository_AddUserToGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_AddUserToGroup_Call) RunAndReturn(run func(int, int, model.AccessLevelValue) error) *MockRepository_AddUserToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AllowPushingToProject provides a mock function with given fields: projectId
func (_m *MockRepository) AllowPushingToProject(projectId int) error {
	ret := _m.Called(projectId)

	if len(ret) == 0 {
		panic("no return value specified for AllowPushingToProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(projectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_AllowPushingToProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllowPushingToProject'
type MockRepository_AllowPushingToProject_Call struct {
	*mock.Call
}

// AllowPushingToProject is a helper method to define mock.On call
//   - projectId int
func (_e *MockRepository_Expecter) AllowPushingToProject(projectId interface{}) *MockRepository_AllowPushingToProject_Call {
	return &MockRepository_AllowPushingToProject_Call{Call: _e.mock.On("AllowPushingToProject", projectId)}
}

func (_c *MockRepository_AllowPushingToProject_Call) Run(run func(projectId int)) *MockRepository_AllowPushingToProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_AllowPushingToProject_Call) Return(_a0 error) *MockRepository_AllowPushingToProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_AllowPushingToProject_Call) RunAndReturn(run func(int) error) *MockRepository_AllowPushingToProject_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeGroupName provides a mock function with given fields: id, name
func (_m *MockRepository) ChangeGroupName(id int, name string) (*model.Group, error) {
	ret := _m.Called(id, name)

	if len(ret) == 0 {
		panic("no return value specified for ChangeGroupName")
	}

	var r0 *model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*model.Group, error)); ok {
		return rf(id, name)
	}
	if rf, ok := ret.Get(0).(func(int, string) *model.Group); ok {
		r0 = rf(id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_ChangeGroupName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeGroupName'
type MockRepository_ChangeGroupName_Call struct {
	*mock.Call
}

// ChangeGroupName is a helper method to define mock.On call
//   - id int
//   - name string
func (_e *MockRepository_Expecter) ChangeGroupName(id interface{}, name interface{}) *MockRepository_ChangeGroupName_Call {
	return &MockRepository_ChangeGroupName_Call{Call: _e.mock.On("ChangeGroupName", id, name)}
}

func (_c *MockRepository_ChangeGroupName_Call) Run(run func(id int, name string)) *MockRepository_ChangeGroupName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_ChangeGroupName_Call) Return(_a0 *model.Group, _a1 error) *MockRepository_ChangeGroupName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_ChangeGroupName_Call) RunAndReturn(run func(int, string) (*model.Group, error)) *MockRepository_ChangeGroupName_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: name, visibility, description
func (_m *MockRepository) CreateGroup(name string, visibility model.Visibility, description string) (*model.Group, error) {
	ret := _m.Called(name, visibility, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.Visibility, string) (*model.Group, error)); ok {
		return rf(name, visibility, description)
	}
	if rf, ok := ret.Get(0).(func(string, model.Visibility, string) *model.Group); ok {
		r0 = rf(name, visibility, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string, model.Visibility, string) error); ok {
		r1 = rf(name, visibility, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockRepository_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - name string
//   - visibility model.Visibility
//   - description string
func (_e *MockRepository_Expecter) CreateGroup(name interface{}, visibility interface{}, description interface{}) *MockRepository_CreateGroup_Call {
	return &MockRepository_CreateGroup_Call{Call: _e.mock.On("CreateGroup", name, visibility, description)}
}

func (_c *MockRepository_CreateGroup_Call) Run(run func(name string, visibility model.Visibility, description string)) *MockRepository_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.Visibility), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_CreateGroup_Call) Return(_a0 *model.Group, _a1 error) *MockRepository_CreateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateGroup_Call) RunAndReturn(run func(string, model.Visibility, string) (*model.Group, error)) *MockRepository_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupAccessToken provides a mock function with given fields: groupID, name, accessLevel, expiresAt, scopes
func (_m *MockRepository) CreateGroupAccessToken(groupID int, name string, accessLevel model.AccessLevelValue, expiresAt time.Time, scopes ...string) (*model.GroupAccessToken, error) {
	_va := make([]interface{}, len(scopes))
	for _i := range scopes {
		_va[_i] = scopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, groupID, name, accessLevel, expiresAt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupAccessToken")
	}

	var r0 *model.GroupAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, model.AccessLevelValue, time.Time, ...string) (*model.GroupAccessToken, error)); ok {
		return rf(groupID, name, accessLevel, expiresAt, scopes...)
	}
	if rf, ok := ret.Get(0).(func(int, string, model.AccessLevelValue, time.Time, ...string) *model.GroupAccessToken); ok {
		r0 = rf(groupID, name, accessLevel, expiresAt, scopes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GroupAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, model.AccessLevelValue, time.Time, ...string) error); ok {
		r1 = rf(groupID, name, accessLevel, expiresAt, scopes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateGroupAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupAccessToken'
type MockRepository_CreateGroupAccessToken_Call struct {
	*mock.Call
}

// CreateGroupAccessToken is a helper method to define mock.On call
//   - groupID int
//   - name string
//   - accessLevel model.AccessLevelValue
//   - expiresAt time.Time
//   - scopes ...string
func (_e *MockRepository_Expecter) CreateGroupAccessToken(groupID interface{}, name interface{}, accessLevel interface{}, expiresAt interface{}, scopes ...interface{}) *MockRepository_CreateGroupAccessToken_Call {
	return &MockRepository_CreateGroupAccessToken_Call{Call: _e.mock.On("CreateGroupAccessToken",
		append([]interface{}{groupID, name, accessLevel, expiresAt}, scopes...)...)}
}

func (_c *MockRepository_CreateGroupAccessToken_Call) Run(run func(groupID int, name string, accessLevel model.AccessLevelValue, expiresAt time.Time, scopes ...string)) *MockRepository_CreateGroupAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(int), args[1].(string), args[2].(model.AccessLevelValue), args[3].(time.Time), variadicArgs...)
	})
	return _c
}

func (_c *MockRepository_CreateGroupAccessToken_Call) Return(_a0 *model.GroupAccessToken, _a1 error) *MockRepository_CreateGroupAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateGroupAccessToken_Call) RunAndReturn(run func(int, string, model.AccessLevelValue, time.Time, ...string) (*model.GroupAccessToken, error)) *MockRepository_CreateGroupAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupInvite provides a mock function with given fields: groupId, email
func (_m *MockRepository) CreateGroupInvite(groupId int, email string) error {
	ret := _m.Called(groupId, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(groupId, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateGroupInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupInvite'
type MockRepository_CreateGroupInvite_Call struct {
	*mock.Call
}

// CreateGroupInvite is a helper method to define mock.On call
//   - groupId int
//   - email string
func (_e *MockRepository_Expecter) CreateGroupInvite(groupId interface{}, email interface{}) *MockRepository_CreateGroupInvite_Call {
	return &MockRepository_CreateGroupInvite_Call{Call: _e.mock.On("CreateGroupInvite", groupId, email)}
}

func (_c *MockRepository_CreateGroupInvite_Call) Run(run func(groupId int, email string)) *MockRepository_CreateGroupInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_CreateGroupInvite_Call) Return(_a0 error) *MockRepository_CreateGroupInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateGroupInvite_Call) RunAndReturn(run func(int, string) error) *MockRepository_CreateGroupInvite_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: name, visibility, description, member
func (_m *MockRepository) CreateProject(name string, visibility model.Visibility, description string, member []model.User) (*model.Project, error) {
	ret := _m.Called(name, visibility, description, member)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.Visibility, string, []model.User) (*model.Project, error)); ok {
		return rf(name, visibility, description, member)
	}
	if rf, ok := ret.Get(0).(func(string, model.Visibility, string, []model.User) *model.Project); ok {
		r0 = rf(name, visibility, description, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string, model.Visibility, string, []model.User) error); ok {
		r1 = rf(name, visibility, description, member)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockRepository_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - name string
//   - visibility model.Visibility
//   - description string
//   - member []model.User
func (_e *MockRepository_Expecter) CreateProject(name interface{}, visibility interface{}, description interface{}, member interface{}) *MockRepository_CreateProject_Call {
	return &MockRepository_CreateProject_Call{Call: _e.mock.On("CreateProject", name, visibility, description, member)}
}

func (_c *MockRepository_CreateProject_Call) Run(run func(name string, visibility model.Visibility, description string, member []model.User)) *MockRepository_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.Visibility), args[2].(string), args[3].([]model.User))
	})
	return _c
}

func (_c *MockRepository_CreateProject_Call) Return(_a0 *model.Project, _a1 error) *MockRepository_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateProject_Call) RunAndReturn(run func(string, model.Visibility, string, []model.User) (*model.Project, error)) *MockRepository_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectInvite provides a mock function with given fields: projectId, email
func (_m *MockRepository) CreateProjectInvite(projectId int, email string) error {
	ret := _m.Called(projectId, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(projectId, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateProjectInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectInvite'
type MockRepository_CreateProjectInvite_Call struct {
	*mock.Call
}

// CreateProjectInvite is a helper method to define mock.On call
//   - projectId int
//   - email string
func (_e *MockRepository_Expecter) CreateProjectInvite(projectId interface{}, email interface{}) *MockRepository_CreateProjectInvite_Call {
	return &MockRepository_CreateProjectInvite_Call{Call: _e.mock.On("CreateProjectInvite", projectId, email)}
}

func (_c *MockRepository_CreateProjectInvite_Call) Run(run func(projectId int, email string)) *MockRepository_CreateProjectInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_CreateProjectInvite_Call) Return(_a0 error) *MockRepository_CreateProjectInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateProjectInvite_Call) RunAndReturn(run func(int, string) error) *MockRepository_CreateProjectInvite_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: id
func (_m *MockRepository) DeleteGroup(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockRepository_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter) DeleteGroup(id interface{}) *MockRepository_DeleteGroup_Call {
	return &MockRepository_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", id)}
}

func (_c *MockRepository_DeleteGroup_Call) Run(run func(id int)) *MockRepository_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_DeleteGroup_Call) Return(_a0 error) *MockRepository_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteGroup_Call) RunAndReturn(run func(int) error) *MockRepository_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: id
func (_m *MockRepository) DeleteProject(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockRepository_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter) DeleteProject(id interface{}) *MockRepository_DeleteProject_Call {
	return &MockRepository_DeleteProject_Call{Call: _e.mock.On("DeleteProject", id)}
}

func (_c *MockRepository_DeleteProject_Call) Run(run func(id int)) *MockRepository_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_DeleteProject_Call) Return(_a0 error) *MockRepository_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteProject_Call) RunAndReturn(run func(int) error) *MockRepository_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DenyPushingToProject provides a mock function with given fields: projectId
func (_m *MockRepository) DenyPushingToProject(projectId int) error {
	ret := _m.Called(projectId)

	if len(ret) == 0 {
		panic("no return value specified for DenyPushingToProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(projectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DenyPushingToProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DenyPushingToProject'
type MockRepository_DenyPushingToProject_Call struct {
	*mock.Call
}

// DenyPushingToProject is a helper method to define mock.On call
//   - projectId int
func (_e *MockRepository_Expecter) DenyPushingToProject(projectId interface{}) *MockRepository_DenyPushingToProject_Call {
	return &MockRepository_DenyPushingToProject_Call{Call: _e.mock.On("DenyPushingToProject", projectId)}
}

func (_c *MockRepository_DenyPushingToProject_Call) Run(run func(projectId int)) *MockRepository_DenyPushingToProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_DenyPushingToProject_Call) Return(_a0 error) *MockRepository_DenyPushingToProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DenyPushingToProject_Call) RunAndReturn(run func(int) error) *MockRepository_DenyPushingToProject_Call {
	_c.Call.Return(run)
	return _c
}

// ForkProject provides a mock function with given fields: projectId, visibility, namespaceId, name, description
func (_m *MockRepository) ForkProject(projectId int, visibility model.Visibility, namespaceId int, name string, description string) (*model.Project, error) {
	ret := _m.Called(projectId, visibility, namespaceId, name, description)

	if len(ret) == 0 {
		panic("no return value specified for ForkProject")
	}

	var r0 *model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(int, model.Visibility, int, string, string) (*model.Project, error)); ok {
		return rf(projectId, visibility, namespaceId, name, description)
	}
	if rf, ok := ret.Get(0).(func(int, model.Visibility, int, string, string) *model.Project); ok {
		r0 = rf(projectId, visibility, namespaceId, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(int, model.Visibility, int, string, string) error); ok {
		r1 = rf(projectId, visibility, namespaceId, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_ForkProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForkProject'
type MockRepository_ForkProject_Call struct {
	*mock.Call
}

// ForkProject is a helper method to define mock.On call
//   - projectId int
//   - visibility model.Visibility
//   - namespaceId int
//   - name string
//   - description string
func (_e *MockRepository_Expecter) ForkProject(projectId interface{}, visibility interface{}, namespaceId interface{}, name interface{}, description interface{}) *MockRepository_ForkProject_Call {
	return &MockRepository_ForkProject_Call{Call: _e.mock.On("ForkProject", projectId, visibility, namespaceId, name, description)}
}

func (_c *MockRepository_ForkProject_Call) Run(run func(projectId int, visibility model.Visibility, namespaceId int, name string, description string)) *MockRepository_ForkProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(model.Visibility), args[2].(int), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockRepository_ForkProject_Call) Return(_a0 *model.Project, _a1 error) *MockRepository_ForkProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_ForkProject_Call) RunAndReturn(run func(int, model.Visibility, int, string, string) (*model.Project, error)) *MockRepository_ForkProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroups provides a mock function with given fields:
func (_m *MockRepository) GetAllGroups() ([]*model.Group, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroups")
	}

	var r0 []*model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Group, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Group); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAllGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroups'
type MockRepository_GetAllGroups_Call struct {
	*mock.Call
}

// GetAllGroups is a helper method to define mock.On call
func (_e *MockRepository_Expecter) GetAllGroups() *MockRepository_GetAllGroups_Call {
	return &MockRepository_GetAllGroups_Call{Call: _e.mock.On("GetAllGroups")}
}

func (_c *MockRepository_GetAllGroups_Call) Run(run func()) *MockRepository_GetAllGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_GetAllGroups_Call) Return(_a0 []*model.Group, _a1 error) *MockRepository_GetAllGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAllGroups_Call) RunAndReturn(run func() ([]*model.Group, error)) *MockRepository_GetAllGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProjects provides a mock function with given fields: search
func (_m *MockRepository) GetAllProjects(search string) ([]*model.Project, error) {
	ret := _m.Called(search)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProjects")
	}

	var r0 []*model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.Project, error)); ok {
		return rf(search)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.Project); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAllProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProjects'
type MockRepository_GetAllProjects_Call struct {
	*mock.Call
}

// GetAllProjects is a helper method to define mock.On call
//   - search string
func (_e *MockRepository_Expecter) GetAllProjects(search interface{}) *MockRepository_GetAllProjects_Call {
	return &MockRepository_GetAllProjects_Call{Call: _e.mock.On("GetAllProjects", search)}
}

func (_c *MockRepository_GetAllProjects_Call) Run(run func(search string)) *MockRepository_GetAllProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_GetAllProjects_Call) Return(_a0 []*model.Project, _a1 error) *MockRepository_GetAllProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAllProjects_Call) RunAndReturn(run func(string) ([]*model.Project, error)) *MockRepository_GetAllProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProjectsOfGroup provides a mock function with given fields: id
func (_m *MockRepository) GetAllProjectsOfGroup(id int) ([]*model.Project, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProjectsOfGroup")
	}

	var r0 []*model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*model.Project, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []*model.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAllProjectsOfGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProjectsOfGroup'
type MockRepository_GetAllProjectsOfGroup_Call struct {
	*mock.Call
}

// GetAllProjectsOfGroup is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter) GetAllProjectsOfGroup(id interface{}) *MockRepository_GetAllProjectsOfGroup_Call {
	return &MockRepository_GetAllProjectsOfGroup_Call{Call: _e.mock.On("GetAllProjectsOfGroup", id)}
}

func (_c *MockRepository_GetAllProjectsOfGroup_Call) Run(run func(id int)) *MockRepository_GetAllProjectsOfGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetAllProjectsOfGroup_Call) Return(_a0 []*model.Project, _a1 error) *MockRepository_GetAllProjectsOfGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAllProjectsOfGroup_Call) RunAndReturn(run func(int) ([]*model.Project, error)) *MockRepository_GetAllProjectsOfGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields:
func (_m *MockRepository) GetAllUsers() ([]*model.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockRepository_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *MockRepository_Expecter) GetAllUsers() *MockRepository_GetAllUsers_Call {
	return &MockRepository_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *MockRepository_GetAllUsers_Call) Run(run func()) *MockRepository_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_GetAllUsers_Call) Return(_a0 []*model.User, _a1 error) *MockRepository_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAllUsers_Call) RunAndReturn(run func() ([]*model.User, error)) *MockRepository_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsersOfGroup provides a mock function with given fields: id
func (_m *MockRepository) GetAllUsersOfGroup(id int) ([]*model.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsersOfGroup")
	}

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*model.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []*model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetAllUsersOfGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsersOfGroup'
type MockRepository_GetAllUsersOfGroup_Call struct {
	*mock.Call
}

// GetAllUsersOfGroup is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter) GetAllUsersOfGroup(id interface{}) *MockRepository_GetAllUsersOfGroup_Call {
	return &MockRepository_GetAllUsersOfGroup_Call{Call: _e.mock.On("GetAllUsersOfGroup", id)}
}

func (_c *MockRepository_GetAllUsersOfGroup_Call) Run(run func(id int)) *MockRepository_GetAllUsersOfGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetAllUsersOfGroup_Call) Return(_a0 []*model.User, _a1 error) *MockRepository_GetAllUsersOfGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetAllUsersOfGroup_Call) RunAndReturn(run func(int) ([]*model.User, error)) *MockRepository_GetAllUsersOfGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentUser provides a mock function with given fields:
func (_m *MockRepository) GetCurrentUser() (*model.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetCurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUser'
type MockRepository_GetCurrentUser_Call struct {
	*mock.Call
}

// GetCurrentUser is a helper method to define mock.On call
func (_e *MockRepository_Expecter) GetCurrentUser() *MockRepository_GetCurrentUser_Call {
	return &MockRepository_GetCurrentUser_Call{Call: _e.mock.On("GetCurrentUser")}
}

func (_c *MockRepository_GetCurrentUser_Call) Run(run func()) *MockRepository_GetCurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_GetCurrentUser_Call) Return(_a0 *model.User, _a1 error) *MockRepository_GetCurrentUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetCurrentUser_Call) RunAndReturn(run func() (*model.User, error)) *MockRepository_GetCurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupById provides a mock function with given fields: id
func (_m *MockRepository) GetGroupById(id int) (*model.Group, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupById")
	}

	var r0 *model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Group, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Group); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetGroupById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupById'
type MockRepository_GetGroupById_Call struct {
	*mock.Call
}

// GetGroupById is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter) GetGroupById(id interface{}) *MockRepository_GetGroupById_Call {
	return &MockRepository_GetGroupById_Call{Call: _e.mock.On("GetGroupById", id)}
}

func (_c *MockRepository_GetGroupById_Call) Run(run func(id int)) *MockRepository_GetGroupById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetGroupById_Call) Return(_a0 *model.Group, _a1 error) *MockRepository_GetGroupById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetGroupById_Call) RunAndReturn(run func(int) (*model.Group, error)) *MockRepository_GetGroupById_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespaceOfProject provides a mock function with given fields: projectId
func (_m *MockRepository) GetNamespaceOfProject(projectId int) (*string, error) {
	ret := _m.Called(projectId)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespaceOfProject")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*string, error)); ok {
		return rf(projectId)
	}
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetNamespaceOfProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespaceOfProject'
type MockRepository_GetNamespaceOfProject_Call struct {
	*mock.Call
}

// GetNamespaceOfProject is a helper method to define mock.On call
//   - projectId int
func (_e *MockRepository_Expecter) GetNamespaceOfProject(projectId interface{}) *MockRepository_GetNamespaceOfProject_Call {
	return &MockRepository_GetNamespaceOfProject_Call{Call: _e.mock.On("GetNamespaceOfProject", projectId)}
}

func (_c *MockRepository_GetNamespaceOfProject_Call) Run(run func(projectId int)) *MockRepository_GetNamespaceOfProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetNamespaceOfProject_Call) Return(_a0 *string, _a1 error) *MockRepository_GetNamespaceOfProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetNamespaceOfProject_Call) RunAndReturn(run func(int) (*string, error)) *MockRepository_GetNamespaceOfProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingGroupInvitations provides a mock function with given fields: groupId
func (_m *MockRepository) GetPendingGroupInvitations(groupId int) ([]*model.PendingInvite, error) {
	ret := _m.Called(groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingGroupInvitations")
	}

	var r0 []*model.PendingInvite
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*model.PendingInvite, error)); ok {
		return rf(groupId)
	}
	if rf, ok := ret.Get(0).(func(int) []*model.PendingInvite); ok {
		r0 = rf(groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PendingInvite)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetPendingGroupInvitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingGroupInvitations'
type MockRepository_GetPendingGroupInvitations_Call struct {
	*mock.Call
}

// GetPendingGroupInvitations is a helper method to define mock.On call
//   - groupId int
func (_e *MockRepository_Expecter) GetPendingGroupInvitations(groupId interface{}) *MockRepository_GetPendingGroupInvitations_Call {
	return &MockRepository_GetPendingGroupInvitations_Call{Call: _e.mock.On("GetPendingGroupInvitations", groupId)}
}

func (_c *MockRepository_GetPendingGroupInvitations_Call) Run(run func(groupId int)) *MockRepository_GetPendingGroupInvitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetPendingGroupInvitations_Call) Return(_a0 []*model.PendingInvite, _a1 error) *MockRepository_GetPendingGroupInvitations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPendingGroupInvitations_Call) RunAndReturn(run func(int) ([]*model.PendingInvite, error)) *MockRepository_GetPendingGroupInvitations_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingProjectInvitations provides a mock function with given fields: projectId
func (_m *MockRepository) GetPendingProjectInvitations(projectId int) ([]*model.PendingInvite, error) {
	ret := _m.Called(projectId)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingProjectInvitations")
	}

	var r0 []*model.PendingInvite
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*model.PendingInvite, error)); ok {
		return rf(projectId)
	}
	if rf, ok := ret.Get(0).(func(int) []*model.PendingInvite); ok {
		r0 = rf(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PendingInvite)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetPendingProjectInvitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingProjectInvitations'
type MockRepository_GetPendingProjectInvitations_Call struct {
	*mock.Call
}

// GetPendingProjectInvitations is a helper method to define mock.On call
//   - projectId int
func (_e *MockRepository_Expecter) GetPendingProjectInvitations(projectId interface{}) *MockRepository_GetPendingProjectInvitations_Call {
	return &MockRepository_GetPendingProjectInvitations_Call{Call: _e.mock.On("GetPendingProjectInvitations", projectId)}
}

func (_c *MockRepository_GetPendingProjectInvitations_Call) Run(run func(projectId int)) *MockRepository_GetPendingProjectInvitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetPendingProjectInvitations_Call) Return(_a0 []*model.PendingInvite, _a1 error) *MockRepository_GetPendingProjectInvitations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPendingProjectInvitations_Call) RunAndReturn(run func(int) ([]*model.PendingInvite, error)) *MockRepository_GetPendingProjectInvitations_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectById provides a mock function with given fields: id
func (_m *MockRepository) GetProjectById(id int) (*model.Project, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectById")
	}

	var r0 *model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Project, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetProjectById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectById'
type MockRepository_GetProjectById_Call struct {
	*mock.Call
}

// GetProjectById is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter) GetProjectById(id interface{}) *MockRepository_GetProjectById_Call {
	return &MockRepository_GetProjectById_Call{Call: _e.mock.On("GetProjectById", id)}
}

func (_c *MockRepository_GetProjectById_Call) Run(run func(id int)) *MockRepository_GetProjectById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetProjectById_Call) Return(_a0 *model.Project, _a1 error) *MockRepository_GetProjectById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetProjectById_Call) RunAndReturn(run func(int) (*model.Project, error)) *MockRepository_GetProjectById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: id
func (_m *MockRepository) GetUserById(id int) (*model.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter) GetUserById(id interface{}) *MockRepository_GetUserById_Call {
	return &MockRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", id)}
}

func (_c *MockRepository_GetUserById_Call) Run(run func(id int)) *MockRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetUserById_Call) Return(_a0 *model.User, _a1 error) *MockRepository_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetUserById_Call) RunAndReturn(run func(int) (*model.User, error)) *MockRepository_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GroupAccessLogin provides a mock function with given fields: token
func (_m *MockRepository) GroupAccessLogin(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GroupAccessLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_GroupAccessLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupAccessLogin'
type MockRepository_GroupAccessLogin_Call struct {
	*mock.Call
}

// GroupAccessLogin is a helper method to define mock.On call
//   - token string
func (_e *MockRepository_Expecter) GroupAccessLogin(token interface{}) *MockRepository_GroupAccessLogin_Call {
	return &MockRepository_GroupAccessLogin_Call{Call: _e.mock.On("GroupAccessLogin", token)}
}

func (_c *MockRepository_GroupAccessLogin_Call) Run(run func(token string)) *MockRepository_GroupAccessLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_GroupAccessLogin_Call) Return(_a0 error) *MockRepository_GroupAccessLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_GroupAccessLogin_Call) RunAndReturn(run func(string) error) *MockRepository_GroupAccessLogin_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: token
func (_m *MockRepository) Login(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockRepository_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - token string
func (_e *MockRepository_Expecter) Login(token interface{}) *MockRepository_Login_Call {
	return &MockRepository_Login_Call{Call: _e.mock.On("Login", token)}
}

func (_c *MockRepository_Login_Call) Run(run func(token string)) *MockRepository_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_Login_Call) Return(_a0 error) *MockRepository_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Login_Call) RunAndReturn(run func(string) error) *MockRepository_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromGroup provides a mock function with given fields: groupId, userId
func (_m *MockRepository) RemoveUserFromGroup(groupId int, userId int) error {
	ret := _m.Called(groupId, userId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(groupId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_RemoveUserFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromGroup'
type MockRepository_RemoveUserFromGroup_Call struct {
	*mock.Call
}

// RemoveUserFromGroup is a helper method to define mock.On call
//   - groupId int
//   - userId int
func (_e *MockRepository_Expecter) RemoveUserFromGroup(groupId interface{}, userId interface{}) *MockRepository_RemoveUserFromGroup_Call {
	return &MockRepository_RemoveUserFromGroup_Call{Call: _e.mock.On("RemoveUserFromGroup", groupId, userId)}
}

func (_c *MockRepository_RemoveUserFromGroup_Call) Run(run func(groupId int, userId int)) *MockRepository_RemoveUserFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_RemoveUserFromGroup_Call) Return(_a0 error) *MockRepository_RemoveUserFromGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_RemoveUserFromGroup_Call) RunAndReturn(run func(int, int) error) *MockRepository_RemoveUserFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RotateGroupAccessToken provides a mock function with given fields: groupID, tokenID, expiresAt
func (_m *MockRepository) RotateGroupAccessToken(groupID int, tokenID int, expiresAt time.Time) (*model.GroupAccessToken, error) {
	ret := _m.Called(groupID, tokenID, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for RotateGroupAccessToken")
	}

	var r0 *model.GroupAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, time.Time) (*model.GroupAccessToken, error)); ok {
		return rf(groupID, tokenID, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(int, int, time.Time) *model.GroupAccessToken); ok {
		r0 = rf(groupID, tokenID, expiresAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GroupAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, time.Time) error); ok {
		r1 = rf(groupID, tokenID, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_RotateGroupAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateGroupAccessToken'
type MockRepository_RotateGroupAccessToken_Call struct {
	*mock.Call
}

// RotateGroupAccessToken is a helper method to define mock.On call
//   - groupID int
//   - tokenID int
//   - expiresAt time.Time
func (_e *MockRepository_Expecter) RotateGroupAccessToken(groupID interface{}, tokenID interface{}, expiresAt interface{}) *MockRepository_RotateGroupAccessToken_Call {
	return &MockRepository_RotateGroupAccessToken_Call{Call: _e.mock.On("RotateGroupAccessToken", groupID, tokenID, expiresAt)}
}

func (_c *MockRepository_RotateGroupAccessToken_Call) Run(run func(groupID int, tokenID int, expiresAt time.Time)) *MockRepository_RotateGroupAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(time.Time))
	})
	return _c
}

func (_c *MockRepository_RotateGroupAccessToken_Call) Return(_a0 *model.GroupAccessToken, _a1 error) *MockRepository_RotateGroupAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_RotateGroupAccessToken_Call) RunAndReturn(run func(int, int, time.Time) (*model.GroupAccessToken, error)) *MockRepository_RotateGroupAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// SearchGroupByExpression provides a mock function with given fields: expression
func (_m *MockRepository) SearchGroupByExpression(expression string) ([]*model.Group, error) {
	ret := _m.Called(expression)

	if len(ret) == 0 {
		panic("no return value specified for SearchGroupByExpression")
	}

	var r0 []*model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.Group, error)); ok {
		return rf(expression)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.Group); ok {
		r0 = rf(expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(expression)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_SearchGroupByExpression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchGroupByExpression'
type MockRepository_SearchGroupByExpression_Call struct {
	*mock.Call
}

// SearchGroupByExpression is a helper method to define mock.On call
//   - expression string
func (_e *MockRepository_Expecter) SearchGroupByExpression(expression interface{}) *MockRepository_SearchGroupByExpression_Call {
	return &MockRepository_SearchGroupByExpression_Call{Call: _e.mock.On("SearchGroupByExpression", expression)}
}

func (_c *MockRepository_SearchGroupByExpression_Call) Run(run func(expression string)) *MockRepository_SearchGroupByExpression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_SearchGroupByExpression_Call) Return(_a0 []*model.Group, _a1 error) *MockRepository_SearchGroupByExpression_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_SearchGroupByExpression_Call) RunAndReturn(run func(string) ([]*model.Group, error)) *MockRepository_SearchGroupByExpression_Call {
	_c.Call.Return(run)
	return _c
}

// SearchProjectByExpression provides a mock function with given fields: expression
func (_m *MockRepository) SearchProjectByExpression(expression string) ([]*model.Project, error) {
	ret := _m.Called(expression)

	if len(ret) == 0 {
		panic("no return value specified for SearchProjectByExpression")
	}

	var r0 []*model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.Project, error)); ok {
		return rf(expression)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.Project); ok {
		r0 = rf(expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(expression)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_SearchProjectByExpression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchProjectByExpression'
type MockRepository_SearchProjectByExpression_Call struct {
	*mock.Call
}

// SearchProjectByExpression is a helper method to define mock.On call
//   - expression string
func (_e *MockRepository_Expecter) SearchProjectByExpression(expression interface{}) *MockRepository_SearchProjectByExpression_Call {
	return &MockRepository_SearchProjectByExpression_Call{Call: _e.mock.On("SearchProjectByExpression", expression)}
}

func (_c *MockRepository_SearchProjectByExpression_Call) Run(run func(expression string)) *MockRepository_SearchProjectByExpression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_SearchProjectByExpression_Call) Return(_a0 []*model.Project, _a1 error) *MockRepository_SearchProjectByExpression_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_SearchProjectByExpression_Call) RunAndReturn(run func(string) ([]*model.Project, error)) *MockRepository_SearchProjectByExpression_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUserByExpression provides a mock function with given fields: expression
func (_m *MockRepository) SearchUserByExpression(expression string) ([]*model.User, error) {
	ret := _m.Called(expression)

	if len(ret) == 0 {
		panic("no return value specified for SearchUserByExpression")
	}

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.User, error)); ok {
		return rf(expression)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.User); ok {
		r0 = rf(expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(expression)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_SearchUserByExpression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUserByExpression'
type MockRepository_SearchUserByExpression_Call struct {
	*mock.Call
}

// SearchUserByExpression is a helper method to define mock.On call
//   - expression string
func (_e *MockRepository_Expecter) SearchUserByExpression(expression interface{}) *MockRepository_SearchUserByExpression_Call {
	return &MockRepository_SearchUserByExpression_Call{Call: _e.mock.On("SearchUserByExpression", expression)}
}

func (_c *MockRepository_SearchUserByExpression_Call) Run(run func(expression string)) *MockRepository_SearchUserByExpression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_SearchUserByExpression_Call) Return(_a0 []*model.User, _a1 error) *MockRepository_SearchUserByExpression_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_SearchUserByExpression_Call) RunAndReturn(run func(string) ([]*model.User, error)) *MockRepository_SearchUserByExpression_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUserByExpressionInGroup provides a mock function with given fields: expression, groupId
func (_m *MockRepository) SearchUserByExpressionInGroup(expression string, groupId int) ([]*model.User, error) {
	ret := _m.Called(expression, groupId)

	if len(ret) == 0 {
		panic("no return value specified for SearchUserByExpressionInGroup")
	}

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]*model.User, error)); ok {
		return rf(expression, groupId)
	}
	if rf, ok := ret.Get(0).(func(string, int) []*model.User); ok {
		r0 = rf(expression, groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(expression, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_SearchUserByExpressionInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUserByExpressionInGroup'
type MockRepository_SearchUserByExpressionInGroup_Call struct {
	*mock.Call
}

// SearchUserByExpressionInGroup is a helper method to define mock.On call
//   - expression string
//   - groupId int
func (_e *MockRepository_Expecter) SearchUserByExpressionInGroup(expression interface{}, groupId interface{}) *MockRepository_SearchUserByExpressionInGroup_Call {
	return &MockRepository_SearchUserByExpressionInGroup_Call{Call: _e.mock.On("SearchUserByExpressionInGroup", expression, groupId)}
}

func (_c *MockRepository_SearchUserByExpressionInGroup_Call) Run(run func(expression string, groupId int)) *MockRepository_SearchUserByExpressionInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_SearchUserByExpressionInGroup_Call) Return(_a0 []*model.User, _a1 error) *MockRepository_SearchUserByExpressionInGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_SearchUserByExpressionInGroup_Call) RunAndReturn(run func(string, int) ([]*model.User, error)) *MockRepository_SearchUserByExpressionInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUserByExpressionInProject provides a mock function with given fields: expression, projectId
func (_m *MockRepository) SearchUserByExpressionInProject(expression string, projectId int) ([]*model.User, error) {
	ret := _m.Called(expression, projectId)

	if len(ret) == 0 {
		panic("no return value specified for SearchUserByExpressionInProject")
	}

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]*model.User, error)); ok {
		return rf(expression, projectId)
	}
	if rf, ok := ret.Get(0).(func(string, int) []*model.User); ok {
		r0 = rf(expression, projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(expression, projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_SearchUserByExpressionInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUserByExpressionInProject'
type MockRepository_SearchUserByExpressionInProject_Call struct {
	*mock.Call
}

// SearchUserByExpressionInProject is a helper method to define mock.On call
//   - expression string
//   - projectId int
func (_e *MockRepository_Expecter) SearchUserByExpressionInProject(expression interface{}, projectId interface{}) *MockRepository_SearchUserByExpressionInProject_Call {
	return &MockRepository_SearchUserByExpressionInProject_Call{Call: _e.mock.On("SearchUserByExpressionInProject", expression, projectId)}
}

func (_c *MockRepository_SearchUserByExpressionInProject_Call) Run(run func(expression string, projectId int)) *MockRepository_SearchUserByExpressionInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_SearchUserByExpressionInProject_Call) Return(_a0 []*model.User, _a1 error) *MockRepository_SearchUserByExpressionInProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_SearchUserByExpressionInProject_Call) RunAndReturn(run func(string, int) ([]*model.User, error)) *MockRepository_SearchUserByExpressionInProject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
