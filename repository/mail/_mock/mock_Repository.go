// Code generated by mockery v2.40.1. DO NOT EDIT.

package mail

import (
	mock "github.com/stretchr/testify/mock"
	mail "gitlab.hs-flensburg.de/gitlab-classroom/repository/mail"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: to, subject, mailData
func (_m *MockRepository) Send(to string, subject string, mailData mail.MailData) error {
	ret := _m.Called(to, subject, mailData)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, mail.MailData) error); ok {
		r0 = rf(to, subject, mailData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockRepository_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - to string
//   - subject string
//   - mailData mail.MailData
func (_e *MockRepository_Expecter) Send(to interface{}, subject interface{}, mailData interface{}) *MockRepository_Send_Call {
	return &MockRepository_Send_Call{Call: _e.mock.On("Send", to, subject, mailData)}
}

func (_c *MockRepository_Send_Call) Run(run func(to string, subject string, mailData mail.MailData)) *MockRepository_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(mail.MailData))
	})
	return _c
}

func (_c *MockRepository_Send_Call) Return(_a0 error) *MockRepository_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Send_Call) RunAndReturn(run func(string, string, mail.MailData) error) *MockRepository_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
